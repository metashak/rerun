searchState.loadedDescShard("re_types_core", 0, "The core types and traits that power Rerun’s data model.\nAn archetype is a high-level construct that represents a …\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nApproximations of stack and heap size for both internal …\nThe unique name of a space view type.\nViews are the panels shown in the viewer’s viewport and …\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReadable name for displaying in ui.\nReturns the total size of <code>self</code> on the heap, in bytes.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this loggable, e.g. …\nThe fully-qualified name of this batch, e.g. …\nRun-time reflection for reading meta-data about components …\nReturns the names of all components that <em>must</em> be provided …\nUseful macro for staticlly asserting that a <code>struct</code> …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of options of owned or reference values …\nAn archetype is a high-level construct that represents a …\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nA generic indicator component that can be specialized for …\nA generic indicator component array of a given length.\nThe associated indicator component, whose presence …\nAn arbitrary named indicator component.\nReturns the names of all components that must, should and …\nReturns the names of all components that must, should and …\nReadable name for displaying in ui.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nReturns the fully-qualified name, e.g. …\nPrecomputed hash of the string.\nCreates a <code>ComponentBatch</code> out of the associated …\nCreates a <code>ComponentBatch</code> out of the associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fully-qualified name of this archetype, e.g. …\nCreate an array of indicator components of this type with …\nReturns the names of all components that <em>may</em> be provided …\nReturns the names of all components that <em>may</em> be provided …\nReturns the names of all components that <em>should</em> be …\nReturns the names of all components that <em>should</em> be …\nReturns the names of all components that <em>must</em> be provided …\nReturns the unqualified name, e.g. <code>Points3D</code>.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Archetype</strong>: Empties all the components of an entity.\nIndicator component for the <code>Clear</code> <code>crate::Archetype</code>\nThe total number of components in the archetype: 1 …\nReturns a non-recursive clear.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Clear</code>.\nReturns a recursive clear.\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nCast POD (plain-old-data) types to another POD type.\nCast POD (plain-old-data) types to <code>u8</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of instances of T stored in this buffer.\nThe number of bytes stored in this buffer\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Configures how a clear operation should behave …\n<strong>Component</strong>: Configures how a clear operation should behave …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\n<strong>Datatype</strong>: A single boolean.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA range of zero length exactly at the time cursor.\nThe range encompassing all time, from -∞ to +∞.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLow time boundary for sequence timeline.\nPut the boundary at the current time cursor.\nBoundary is an absolute value.\nBoundary is a value relative to the time cursor.\nThe boundary extends to infinity.\n<strong>Datatype</strong>: Left or right boundary of a time range.\nReturns the correct time assuming this boundary is an end …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the time assuming this boundary is a start …\n<strong>Datatype</strong>: A 16bit unsigned integer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A 32bit unsigned integer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A 64bit unsigned integer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTime range to use for this timeline.\nName of the timeline this applies to.\nA <code>Component</code> describes semantic data that can be used by …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nA <code>Loggable</code> represents a single instance in an array of …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nWeb URL to the Rerun documentation for this component.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an Arrow array, deserializes it into a collection of …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nIf this is an indicator component, for which archetype?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this an indicator component for an archetype?\nDetermine if component matches a string\nThe fully-qualified name of this loggable, e.g. …\nReturns the unqualified name, e.g. <code>Position2D</code>.\nReturns the unqualified name, e.g. <code>Vec2D</code>.\nGiven an iterator of owned or reference values to the …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe fully-qualified name of this batch, e.g. …\nSerializes the batch into an Arrow array.\nSerializes the batch into an Arrow list array with a …\nSerializes the batch into an Arrow list array with a …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nFind an <code>ArchetypeReflection</code> based on its short name.\nThe type of the field (it’s always a component).\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a required component?\nPlaceholder value, used whenever no fallback was provided …\nIterate over this archetype’s required fields.\nAll variants, in the order they appear in the enum.\nA cloneable wrapper around <code>arrow2::error::Error</code>, for …\nE.g. too many values (overflows i32).\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nReturns the <em>unresolved</em> backtrace associated with this …\nReturns the <em>unresolved</em> backtrace associated with this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApproximations of stack and heap size for both internal …\nReturns the total (heap) allocated size of the array in …\nReturns the total size of <code>self</code> on the heap, in bytes.\nIs <code>Self</code> just plain old data?\nIs <code>Self</code> just plain old data?\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> in bytes, accounting for …\nReturns the total size of <code>self</code> in bytes, accounting for …\nThe unique name of a space view type.\nViews are the panels shown in the viewer’s viewport and …\nReturns the argument unchanged.\nPrecomputed hash of the string.\nCalls <code>U::from(self)</code>.")
searchState.loadedDescShard("re_entity_db", 0, "This is how we store and index logging data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nThe different parts that make up an <code>EntityPath</code>.\nContains the error value\nThe errors that can occur when misusing the chunk store.\nThe path to either a specific instance of an entity, or …\nHashes of the components of an <code>InstancePath</code>.\nGet the latest version of the data available at this time.\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nContains the success value\nGet all the data within this time interval, plus the latest\nSpecial value used to represent static data.\nStores many <code>EntityDb</code>s of recordings and blueprints.\nNumber of messages per time.\nNumber of messages per time per timeline.\nA 64-bit number describing either nanoseconds, sequence …\nA query in time.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nA <code>ChunkStoreSubscriber</code> that keeps track of all unique …\nA versioned path (i.e. pinned to a specific <code>RowId</code>) to …\nHashes of the components of a <code>VersionedInstancePath</code>.\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nReturns the first common ancestor of two paths.\nReturns the first common ancestor of a list of entity …\nReturns the appropriate arrow datatype to represent this …\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nUse this when it is part of a full entity path.\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTreat the file path as an entity path hierarchy.\nTreat the file path as one opaque string.\nFor time timelines.\nFor time timelines.\nFor time timelines.\nFor sequence timelines.\nTreat the string as one opaque string, NOT splitting on …\nPrecomputed 64-bit hash.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nHelper function to iterate over all incremental <code>EntityPath</code>…\nIf this is a concrete instance, what instance index are we?\nIf this is a concrete instance, what instance index are we?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a direct child of the other path.\nIs this a strict descendant of the given path.\nNumber of parts\nThe log tick timeline to which all API functions will …\nThe log time timeline to which all API functions will …\nThe given string is expected to be unescaped, i.e. any <code>\\</code> …\nFor things like camera frames or iteration count.\nCreates a new temporal <code>TimeInt</code>.\nFor absolute or relative time.\nExtra bookkeeping used to seed any timelines that include …\nReturn <code>None</code> if root.\nParses an entity path, handling any malformed input with a …\nUnescape the string, forgiving any syntax error with a …\nUnescape the string, forgiving any syntax error with a …\nParse an entity path from a string, with strict checks for …\nUnescape the string, returning errors on wrongly escaped …\nReturns short names for a collection of entities based on …\nIs this equals to, or a descendant of, the given path.\nWhen do we have data? Ignores timeless.\nThe style of string to use in a UI\nThe unescaped string.\nSee <code>GarbageCollectionOptions::time_budget</code>.\nAn in-memory database built from a stream of <code>LogMsg</code>es.\nMake a clone of this <code>EntityDb</code>, assigning it a new <code>StoreId</code>.\nIf this entity db is the result of a clone, which store …\nWhat is the mean latency between the time data was logged …\nSet by whomever created this <code>EntityDb</code>.\nStores all components for all entities for all timelines.\nUnconditionally drops all the data for a given <code>EntityPath</code> .\nUnconditionally drops all the data for a given <code>EntityPath</code> …\nDrop all events in the given time range from the given …\nIn many places we just store the hashes, so we need a way …\nA sorted list of all the entity paths in this database.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the current <code>ChunkStoreGeneration</code>. This can be used …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> also for entities higher up in the hierarchy.\nIf you log <code>world/points</code>, then that is a logged entity, but …\nKeeps track of the last time data was inserted into this …\nQueries for the given <code>component_names</code> using latest-at …\nGet the latest index and value for a given dense …\nGet the latest index and value for a given dense …\nThe highest <code>RowId</code> in the store, which corresponds to the …\nThe highest <code>RowId</code> in the store, which corresponds to the …\nFree up some RAM by forgetting the older parts of all …\nQuery caches for the data in <code>Self::data_store</code>.\nComes in a special message, <code>LogMsg::SetStoreInfo</code>.\nKey used for sorting recordings in the UI.\nReturns true if an entity or any of its children have any …\nReturns true if an entity or any of its children have any …\nReturns the stats for the entity and all its children on …\nReturns the stats for the static store of the entity and …\nHistogram of all events on the timeeline, of all entities.\nA time histogram of all entities, for every timeline.\nReturns the time range of data on the given timeline, …\nThe global-scope time tracker.\nExport the contents of the current database to a sequence …\nA tree-view (split on path components) of the entities.\nMaintains an optimized representation of a batch of …\nA recursive, manually updated <code>ChunkStoreSubscriber</code> that …\nDirect descendants of this (sub)tree.\nInvokes the <code>predicate</code> for <code>self</code> and all children …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this entity has no children and no data.\nHas no child entities.\nUpdates the <code>EntityTree</code> by applying a batch of …\nUpdates the <code>EntityTree</code> by removing any entities which have …\nFull path prefix to the root of this (sub)tree.\nWhat rows were deleted?\nWhat time points were deleted for each …\nFor each entity+component, how many timeless entries were …\nThe path to either a specific instance of an entity, or …\nHashes of the components of an <code>InstancePath</code>.\nIndicate the whole entity (all instances of it).\nIndicate the whole entity (all instances of it).\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicate a specific instance of the entity, e.g. a …\nIndicate a specific instance of the entity, e.g. a …\nIf this is a concrete instance, what instance index are we?\nIf this is a concrete instance, what instance index are we?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we refer to the whole entity (all instances of it)?\nVersions this instance path by stamping it with the …\nVersions this hashed instance path by stamping it with the …\nStores many <code>EntityDb</code>s of recordings and blueprints.\nCreates one if it doesn’t exist.\nIn no particular order.\nIn no particular order.\nAll loaded <code>EntityDb</code>, both recordings and blueprints, in …\nAll loaded <code>EntityDb</code>, both recordings and blueprints, in …\nReturns either a recording or blueprint <code>EntityDb</code>. One is …\nReturns the closest “neighbor” recording to the given …\nReturns the <code>StoreId</code> of the oldest modified recording, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode an rrd stream. It can theoretically contain …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIn no particular order.\nNumber of messages per time.\nNumber of messages per time per timeline.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtra bookkeeping used to seed any timelines that include …\nTotal number of temporal messages over all timelines.\nWhen do we have data? Ignores timeless.\nA <code>ChunkStoreSubscriber</code> that keeps track of all unique …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA versioned path (i.e. pinned to a specific <code>RowId</code>) to …\nHashes of the components of a <code>VersionedInstancePath</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we refer to the whole entity (all instances of it)?")
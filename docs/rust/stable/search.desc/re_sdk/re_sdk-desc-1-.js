searchState.loadedDescShard("re_sdk", 1, "Blocks until all pending data in the sink’s send buffers …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandle to join the encoder thread on drop.\nStart writing log messages to a file at the given path.\nSend this log message.\nStart writing log messages to standard output.\nThe sender to the encoder thread.\nFailed to find Rerun Viewer executable at explicit path.\nFailed to find Rerun Viewer executable in PATH.\nOther I/O error.\nErrors that can occur when <code>spawn</code>ing a Rerun Viewer.\nOptions to control the behavior of <code>spawn</code>.\nResolves the final connect address value.\nSpecifies the name of the Rerun executable.\nResolves the final executable path.\nEnforce a specific executable to use instead of searching …\nExtra arguments that will be passed as-is to the Rerun …\nExtra environment variables that will be passed as-is to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHide the welcome screen.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolves the final listen address value.\nAn upper limit on how much memory the Rerun Viewer should …\nThe port to listen on.\nSpawns a new Rerun Viewer process ready to listen for TCP …\nIf <code>true</code>, the call to <code>spawn</code> will block until the Rerun …\nName used for the executable search.\nExplicit path of the executable (specified by the caller).\nHigh-level error message meant to be printed to the user …\nValue of the <code>PATH</code> environment variable, if any.\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nSpecial value used to represent static data.\nUsed e.g. for frames in a film.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor time timelines.\nFor time timelines.\nFor time timelines.\nFor sequence timelines.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new temporal <code>TimeInt</code>.\nFailure to host the Rerun WebSocket server.\nHelper to spawn an instance of the <code>WebViewerServer</code> and …\nFailure to host the web viewer.\nA <code>crate::sink::LogSink</code> tied to a hosted Rerun web viewer. …\nFailure to host a web viewer and/or Rerun server.\nThe http server serving wasm &amp; html.\nIp to which the http server is bound.\nIf set, adjusts the browser url to force a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper to spawn an instance of the <code>WebViewerServer</code>. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>bind_ip</code> of <code>&quot;0.0.0.0&quot;</code> is a good default.\nServe log-data over WebSockets and serve a Rerun web …\nIf set to <code>true</code>, opens the default browser after hosting …\nRerun websocket server.\nSender to send messages to the <code>re_ws_comms::RerunServer</code>\nThe url from which a spawned webviewer should source\nIf set, adjusts the browser url to set the video decoder …\nThe port to which the webviewer should bind.")
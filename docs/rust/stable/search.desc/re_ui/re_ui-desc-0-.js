searchState.loadedDescShard("re_ui", 0, "Rerun GUI theme and helpers, built around <code>egui</code>.\nIf true, we hide the native window decoration (the top bar …\nExtension trait for <code>egui::Context</code>.\nThe look and feel of the UI.\nIf true, we fill the entire window, except for the …\nNewtype over <code>egui::Key</code> which provides a <code>Display</code> …\nThe style of a label.\nNewtype over <code>egui::Modifiers</code> which provides a <code>Display</code> …\nNewtype over <code>egui::PointerButton</code> which provides a <code>Display</code> …\nIf true, we show the native window decorations/chrome with …\nRegular style for a label.\nA collapsible section header, with support for optional …\nAll the commands we support.\nInterface for sending <code>UICommand</code> messages.\nRerun custom extensions to <code>egui::Ui</code>.\nLabel displaying the placeholder text for a yet unnamed …\nApply the Rerun design tokens to the given egui context …\nReturn a reference to the global design tokens structure.\nHelpers for drag and drop support for reordering …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight of the top bar\nExtra horizontal space in the top left corner to make room …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this Ui in a resizable panel?\nSecond-generation list item.\nA toast notification system for egui, roughly based on …\nAll the commands we support.\nAn iterator over the variants of UICommand\nInterface for sending <code>UICommand</code> messages.\nAdd e.g. “ (Ctrl+F11)“ as a suffix\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShow this command as a menu-button.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShow the command palette, if it is visible.\nExtension trait for <code>egui::Context</code>.\nHovered UI and spatial primitives should have this outline.\nHovered UI and spatial primitives should have this outline.\nPaint a watermark\nPaint a watermark\nSelected UI and spatial primitives should have this …\nSelected UI and spatial primitives should have this …\nText format used for regular body.\nText format used for regular body.\nText format used for labels referring to keys and buttons.\nText format used for labels referring to keys and buttons.\nThe look and feel of the UI.\nApply style to the given egui context.\nFor the streams view (time panel)\nLayout area to allocate for the collapsing triangle.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad design tokens from <code>data/design_tokens.json</code>.\nThe color we use to mean “loop all the data”\nThe color we use to mean “loop this selection”\nThe color for the background of …\nUsed by the “add view or container” modal.\nHeight of the title row in the blueprint view and …\nHeight of the top-most bar.\nMargin on all sides of views.\nContainer item.\nDrop target information, including where to draw the drop …\nContext information about the hovered item.\nLeaf item.\nRoot container item.\nCompute the geometry of the drag cursor and where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the item being hovered during drag\nY coordinate for drag target indicator\nRange of X coordinates for the drag target indicator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of item is this?\nID of the container just before this item within the …\nDestination container ID\nDestination position within the container\nUsed for HTTP URLs that lead out of the app.\nLink within the viewer\nReturns the argument unchanged.\nMacro to create an <code>Icon</code>, using the file path as the id.\nHuman readable unique id\nCalls <code>U::from(self)</code>.\nThe content needs at least this width for display, but …\nSimple <code>ListItemContent</code> to easily display a button in a …\nContext provided to <code>ListItemContent</code> implementations\n<code>ListItemContent</code> that delegates to a closure.\n<code>ListItemContent</code> that displays the content rect.\nThe content needs exactly this width for display.\nAn <code>super::ItemButton</code> that acts as an action button.\nA button that can be used by a list item.\nAn <code>super::ItemButton</code> that acts as a popup menu.\n<code>ListItemContent</code> that displays a simple label with optional …\nLayout information prepared by <code>list_item_scope</code> to be used …\nContent-generic list item.\n<code>ListItemContent</code> to display property-like, two-column …\nResponses returned by …\nBackground area\nResponse from the body, if it was displayed.\nThe desired width of the content.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAbstraction for buttons to be used in list items.\nResponse from the item itself.\nLayout information to use for rendering.\nColumn width to be read this frame.\nLeft-most X coordinate for the scope.\nCore list item functionality.\nThe current list item.\nCreate a scope in which <code>[ListItem]</code>s can be created.\n0.0 if fully closed, 1.0 if fully open, and something …\n<code>PropertyContent</code> only — last frame’s max content width, …\nArea available for the content to draw in.\nIf true, right-aligned space should be reserved for the …\nList item response.\nScope id, used to retrieve the corresponding …\nUI for everything that is after the indent and the …\nDraw the button.\nSimple <code>ListItemContent</code> to easily display a button in a …\nSets whether the button is enabled.\nReturns the argument unchanged.\nSets the hover text of the button.\nCalls <code>U::from(self)</code>.\nCalled when the button is clicked.\nAn <code>super::ItemButton</code> that acts as an action button.\nAn <code>super::ItemButton</code> that acts as a popup menu.\nSets text shown when the button is disabled and hovered.\nSets text shown when the button is disabled and hovered.\nSets enable/disable state of the button.\nSets enable/disable state of the button.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets text shown when the button hovered.\nSets text shown when the button hovered.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ListItemContent</code> that displays a simple label with optional …\nAlways show the buttons.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRender text in italic.\nStyle the label for an unnamed items.\nSet the minimum desired for the content.\nSet the subdued state of the item.\nShould we truncate text if it is too long?\nSet the weak state of the item.\nProvide a closure to display on-hover buttons on the right …\nProvide an <code>Icon</code> to be displayed on the left of the item.\nProvide a custom closure to draw an icon on the left of …\nContent-generic list item.\nResponses returned by …\nResponse from the body, if it was displayed.\nResponse from the collapse-triangle button, if any.\nMake the item draggable.\nHighlight the item as the current drop target.\nOverride the background color for the item.\nOverride the hovered state even if the item is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCan the user click and interact with it?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResponse from the item itself.\nCreate a new <code>ListItem</code> with the given label.\n0.0 if fully closed, 1.0 if fully open, and something …\nResponse of the whole <code>ListItem</code>\nSet the selected state of the item.\nDraw the item as part of a flat list.\nDraw the item as a leaf node from a hierarchical list.\nDraw the item as a non-leaf node from a hierarchical list.\nDraw the item with unindented child content.\nSet the item height.\n<code>ListItemContent</code> that delegates to a closure.\n<code>ListItemContent</code> that displays the content rect.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpacing used between the two main columns\nClosure to draw an icon left of the label.\n<code>ListItemContent</code> to display property-like, two-column …\nClosure to draw the right column of the property.\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nAdd a right-aligned <code>super::ItemButton</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nSet the minimum desired width for the entire content.\nDisplay value only for leaf or collapsed items.\nShow a read-only boolean in the value column.\nShow an editable boolean in the value column.\nShow a read-only color in the value column.\nShow an editable color in the value column.\nProvide a closure to draw the content of the right column.\nShow a static text in the value column.\nShow an editable text in the value column.\nProvide an <code>Icon</code> to be displayed on the left of the label.\nProvide a custom closure to draw an icon on the left of …\nLayout information prepared by <code>list_item_scope</code> to be used …\nStack of <code>LayoutInfo</code>s.\nLayout statistics accumulated during the frame that are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrack whether any item uses the action button.\nColumn width to be read this frame.\nLeft-most X coordinate for the scope.\nCreate a scope in which <code>[ListItem]</code>s can be created.\nMaximum desired column width.\nMax item width.\n<code>PropertyContent</code> only — max content width in the current …\n<code>PropertyContent</code> only — last frame’s max content width, …\nRead the saved accumulated value.\nRegister the desired width of the left column.\nRegister the maximum width of the item.\n<code>PropertyContent</code> only — register max content width in the …\nIndicate whether right-aligned space should be reserved …\nIf true, right-aligned space should be reserved for the …\nReset the layout statistics to the default.\nScope id, used to retrieve the corresponding …\nReturns the current <code>LayoutInfo</code> to be used by …\nUpdate the accumulator.\nNewtype over <code>egui::Key</code> which provides a <code>Display</code> …\nNewtype over <code>egui::Modifiers</code> which provides a <code>Display</code> …\nNewtype over <code>egui::PointerButton</code> which provides a <code>Display</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShow a modal window with Rerun style.\nHelper object to handle a <code>Modal</code> window.\nResponse returned by <code>Modal::ui</code>.\nSet the default height of the modal window.\nDim the background to indicate that the window is modal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the content area of the modal for full span …\nWhat the content closure returned, if it was actually run.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum height of the modal window.\nSet the minimum width of the modal window.\nCreate a new modal with the given title.\nOpen the model next time the <code>ModalHandler::ui</code> method is …\nWhether the modal should remain open.\nDisplay a title bar in our own style.\nShow the modal window.\nDraw the modal window, creating/destroying it as required.\nA collapsible section header, with support for optional …\nSet the button to be shown in the header.\nSet the default open state of the section header.\nReturns the argument unchanged.\nSet the help markdown tooltip to be shown in the header.\nSet the help text tooltip to be shown in the header.\nSet the help UI closure to be shown in the header.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Self</code>.\nDisplay the header.\nAdds a new toast\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShows and updates all toasts\nThis can be used to show or hide the toast type icon.\nTime to live in seconds.\nRerun custom extensions to <code>egui::Ui</code>.\nDraw a bullet (for text lists).\nDraw a bullet (for text lists).\nCenter the content within <code>egui::Ui::max_rect()</code>.\nCenter the content within <code>egui::Ui::max_rect()</code>.\nReplacement for <code>egui::CollapsingHeader</code> that respect our …\nReplacement for <code>egui::CollapsingHeader</code> that respect our …\nDraws a shadow into the given rect with the shadow …\nDraws a shadow into the given rect with the shadow …\nA drop-down menu with a list of options.\nA drop-down menu with a list of options.\nShows a small error label with the given text on hover and …\nShows a small error label with the given text on hover and …\nShows an error label with the entire error text and copies …\nShows an error label with the entire error text and copies …\nRetrieve the current full-span scope.\nRetrieve the current full-span scope.\nUse the provided range as full span for the nested content.\nUse the provided range as full span for the nested content.\nCreate a separator similar to <code>egui::Separator</code> but with the …\nCreate a separator similar to <code>egui::Separator</code> but with the …\nWorkaround for putting a label into a grid at the top left …\nWorkaround for putting a label into a grid at the top left …\nConvenience function to create a <code>list_item::ListItem</code>.\nConvenience function to create a <code>list_item::ListItem</code>.\nConvenience to create a non-interactive, collapsible …\nConvenience to create a non-interactive, collapsible …\nConvenience for adding a flat non-interactive …\nConvenience for adding a flat non-interactive …\nPopup similar to <code>egui::popup_below_widget</code> but suitable for …\nPopup similar to <code>egui::popup_below_widget</code> but suitable for …\nShow some markdown\nShow some markdown\nConditionally collapsing header.\nConditionally collapsing header.\nShow some close/maximize/minimize buttons for the native …\nShow some close/maximize/minimize buttons for the native …\nPaint a collapsing triangle with rounded corners.\nPaint a collapsing triangle with rounded corners.\nPaints a time cursor for indicating the time on a time …\nPaints a time cursor for indicating the time on a time …\nStatic title bar used to separate panels into section.\nStatic title bar used to separate panels into section.\nStatic title bar used to separate panels into section with …\nStatic title bar used to separate panels into section with …\nHelper for adding a list-item hyperlink.\nHelper for adding a list-item hyperlink.\nConvenience function to create a …\nConvenience function to create a …\nStyle <code>egui::Ui::selectable_value</code>s and friends into a …\nStyle <code>egui::Ui::selectable_value</code>s and friends into a …\nTwo-column grid to be used in selection view.\nTwo-column grid to be used in selection view.\nBinary toggle switch.\nBinary toggle switch.")
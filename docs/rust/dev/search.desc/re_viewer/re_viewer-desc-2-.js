searchState.loadedDescShard("re_viewer", 2, "Time in microseconds.\nTime in milliseconds.\nmonths_days_ns(i32, i32, i64)\nThe number of elapsed months (i32), days (i32) and …\nTime in nanoseconds.\nA Null with no allocation.\nNull type\nThe set of physical types: unique in-memory …\nAn array where each slot has a known compile-time size.\nThe set of all implementations of the sealed trait …\nAn ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.\ntypedef for <code>Arc&lt;Schema&gt;</code>.\nTime in seconds.\nSparse union\nA nested type that contains an arbitrary number of fields.\nA nested <code>DataType</code> with a given number of <code>Field</code>s.\nA 32-bit time representing the elapsed time since midnight …\nA 64-bit time representing the elapsed time since midnight …\nThe time units defined in Arrow.\nA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …\nAn unsigned 16-bit integer.\nAn unsigned 16-bit integer.\nAn <code>u16</code>\nAn unsigned 32-bit integer.\nAn unsigned 32-bit integer.\nAn <code>u32</code>\nAn unsigned 64-bit integer.\nAn unsigned 64-bit integer.\nAn <code>u64</code>\nAn unsigned 8-bit integer.\nAn unsigned 8-bit integer.\nAn <code>u8</code>\nA nested type that represents slots of differing types.\nA nested datatype that can represent slots of differing …\nMode of <code>DataType::Union</code>\nA variable-length string in Unicode with UTF-8 encoding.\nA variable-length UTF-8 encoded string whose offsets are …\nThe number of elapsed whole months.\nReturns the <code>Field</code>’s <code>DataType</code>.\nIts logical <code>DataType</code>\nWhether this physical type equals <code>PhysicalType::Primitive</code> …\nThe fields composing this schema.\nReturns a new <code>Schema</code> with a subset of all fields whose …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nsupport get extension for metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the mode is dense\nIts nullability\nReturns whether the mode is sparse\nAdditional custom (opaque) metadata.\nOptional metadata.\nIts name\nCreates a new <code>Field</code>.\nConstructs a <code>UnionMode::Sparse</code> if the input bool is true, …\nReturns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …\nthe <code>PhysicalType</code> of this <code>DataType</code>.\nIf we have the only reference to <code>T</code> then unwrap it. …\nCreates a new <code>Field</code> with metadata.\nAttaches a <code>Metadata</code> to <code>Schema</code>\nContains the error value\nEnum with all errors in this crate.\nWrapper for an error triggered by a dependency\nError during import or export to/from a format\nWhen an invalid argument is passed to a function.\nWrapper for IO errors\nReturned when functionality is not yet available.\nContains the success value\nWhenever incoming data from the C data interface, IPC or …\nWhenever pushing to a container fails because it does not …\nTypedef for a <code>std::result::Result</code> of an <code>Error</code>.\nReturns the argument unchanged.\nWraps an external error in an <code>Error</code>.\nCalls <code>U::from(self)</code>.\nABI-compatible struct for <code>ArrowArray</code>\nABI-compatible struct for <code>ArrowArrayStream</code>.\nImplements an iterator of <code>Array</code> consumed from the C stream …\nABI-compatible struct for <code>ArrowSchema</code>\ncreate an empty ArrowSchema\ncreates an empty <code>ArrowArray</code>, which can be used to import …\nCreates an empty <code>ArrowArrayStream</code> used to import from a …\nExports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.\nExports a <code>Field</code> to the C data interface.\nExports an iterator to the C stream interface\nReturns the field provided by the stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImports an <code>Array</code> from the C data interface.\nImports a <code>Field</code> from the C data interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctionality to mmap in-memory data regions.\nAdvances this iterator by one array\nReturns a new <code>ArrowArrayStreamReader</code>\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nAPIs to read from and write to Arrow’s IPC format.\nAPIs to represent <code>Chunk</code> as a formatted table.\nStruct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …\nStruct containing fields and whether the file is written …\nA struct adapter of Read+Seek+Write to append to IPC files\ndictionary id\noptional children\nThe fields in the schema\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEndianness of the file\nAPIs to read Arrow’s IPC format.\nAPIs to write to Arrow’s IPC format.\nhow dictionaries are tracked in this crate\nThe record contains a number of buffers that does not …\nMetadata of an Arrow IPC file, written in the footer of …\nAn iterator of <code>Chunk</code>s from an Arrow IPC file.\nA bitmap’s size is smaller than the required for the …\nA buffer’s size is smaller than the required for the …\nA buffer’s size is larger than the file size\nFixedSizeBinaryArray has invalid datatype.\nThe block is an invalid flatbuffer\nThe message’s body length is an invalid flatbuffer\nThe message’s buffers is an invalid flatbuffer\nThe compression is an invalid flatbuffer\nThe message’s data is an invalid flatbuffer\nThe footer’s dictionaries is an invalid flatbuffer\nThe footer is an invalid flatbuffer\nThe message’s header is an invalid flatbuffer\nThe dictionary id is an invalid flatbuffer\nThe dictionary is_delta is an invalid flatbuffer\nThe dictionary message is an invalid flatbuffer\nThe message’s nodes is an invalid flatbuffer\nThe footer’s record batches is an invalid flatbuffer\nThe footer’s schema is an invalid flatbuffer\nThe version is an invalid flatbuffer\nThe IPC file does not end with [b’A’, b’R’, b’R…\nThe IPC file does not start with [b’A’, b’R’, b’R…\nInvalid dictionary id\nField id is not a dictionary\nThe message does not contain data\nThe file’s schema does not contain fields\nRecordBatch messages do not contain buffers\nThe message does not contain a header\nRecordBatch messages does not contain nodes\nThe file’s footer does not contain record batches\nThe file’s footer does not contain a schema\nThe first 4 bytes of the last 10 bytes is &lt; 0\nThe different types of errors that reading from IPC can …\nNext item in the stream\nMetadata of an Arrow IPC stream, written at the start of …\nArrow Stream reader.\nEncodes the stream’s status after each read.\ndictionaries can only contain dictionary messages; record …\nRelative positions in the file is &lt; 0\nA live stream without data\nThe blocks in the file\nDeserialize an flatbuffers-encoded Schema message into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this FileReader, returning the underlying reader\nThe files’ <code>IpcSchema</code>\nThe IPC fields tracking dictionaries\nCheck if the stream is finished\nReturns the <code>FileMetadata</code>\nReturn the schema of the stream\nCreates a new <code>FileReader</code>. Use <code>projection</code> to only take …\nTry to create a new stream reader\nReads the record batch at position <code>index</code> from the reader.\nReads all file’s dictionaries, if any This function is …\nRead the Arrow IPC file’s metadata\nReads the metadata of the stream\nReturn the schema of the file\nReturn the schema of the file\nThe schema that is read from the file footer\nThe schema that is read from the stream’s first message\nSet the inner memory scratches so they can be reused in a …\nThe total size of the file in bytes\nReturn the data inside this wrapper.\nThe IPC version of the stream\nThe size of the IPC buffer\nnumber of bytes of all buffers in the record\nthe size of the file\nDeclared number of elements in the buffer\nDeclared length of the bitmap\nNumber of bits on the IPC buffer\nThe requested dictionary id\nThe requested dictionary id\nBytes required for the <code>length</code> and <code>type</code>\nThe name of the <code>NativeType</code>\nCompression codec\nArrow file writer\nLZ4 (framed)\nAn array <code>Chunk</code> with optional accompanying IPC fields.\nArrow stream writer\nOptions declaring the behaviour of writing to IPC\nZSTD\nGet the Arrow columns in this record.\nWhether the buffers should be compressed and which codec …\nAssigns every dictionary field a unique ID\nGet the IPC fields for this record.\nWrite continuation bytes, and mark the stream as done\nWrite footer and closing tag, then mark the writer as done\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes itself, returning the inner writer.\nConsumes itself into the inner writer\nCreates a new <code>StreamWriter</code>\nCreates a new <code>FileWriter</code>.\nConverts a Schema and IpcFields to a flatbuffers-encoded …\nSet the inner memory scratches so they can be reused in a …\nStarts the stream by writing a Schema message to it. Use …\nWrites the header and first (schema) message to the file.\nCreates a new <code>FileWriter</code> from an existing file, seeking to …\nCreates a new <code>FileWriter</code> and writes the header to <code>writer</code>\nWrites an <code>Array</code> to <code>arrow_data</code>\nWrites <code>Chunk</code> to the stream\nWrites <code>Chunk</code> to the file\nReturns a visual representation of <code>Chunk</code>\nMemory maps dictionaries from an IPC file into\nMemory maps an record batch from an IPC file into a <code>Chunk</code>.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nA wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …\nA wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:\nReturns the byte slice stored in this buffer\nReturns the byte slice stored in this buffer\nReturns a reference to its internal <code>Buffer</code>.\nReturns the capacity of <code>Offsets</code>.\nExtends itself with <code>additional</code> elements equal to the last …\nReturns the first offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>Vec</code>.\nReturns the inner <code>Buffer</code>.\nCopy-on-write API to convert <code>OffsetsBuffer</code> into <code>Offsets</code>.\nReturns the last offset of this container.\nReturns the last offset.\nReturns the number of offsets in this container.\nReturns the number of offsets in this container.\nReturns the length an array with these offsets would be.\nReturns the length an array with these offsets would be.\nReturns an iterator with the lengths of the offsets\nReturns an empty <code>Offsets</code> (i.e. with a single element, the …\nReturns an empty <code>OffsetsBuffer</code> (i.e. with a single …\nReturns <code>Offsets</code> assuming that <code>offsets</code> fulfills its …\nSafety\nReturns an <code>Offsets</code> whose all lengths are zero.\nPops the last element\nReturns the range of the offsets.\nReserves <code>additional</code> entries.\nShrinks the capacity of self to fit.\nSlices this <code>OffsetsBuffer</code>.\nSlices this <code>OffsetsBuffer</code> starting at <code>offset</code>.\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nTry extend from an iterator of lengths\nExtends itself from another <code>Offsets</code>\nExtends itself from another <code>Offsets</code> sliced by <code>start, length</code>\nCreates a new <code>Offsets</code> from an iterator of lengths\nTry to create a new <code>Offsets</code> from a sequence of <code>lengths</code>\nPushes a new element with a given length.\nPushes a new element with a given length.\nReturns a new <code>Offsets</code> with a capacity, allocating at least …\nThe <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).\nThe <code>Scalar</code> implementation of a boolean.\nThe <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.\nThe <code>Scalar</code> implementation of fixed size binary ([…\nThe scalar equivalent of <code>FixedSizeListArray</code>. Like …\nThe scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …\nThe scalar equivalent of <code>MapArray</code>. Like <code>MapArray</code>, this …\nThe representation of a single entry of a …\nThe implementation of <code>Scalar</code> for primitive, semantically …\nTrait object declaring an optional value with a <code>DataType</code>. …\nA single entry of a <code>crate::array::StructArray</code>.\nA single entry of a <code>crate::array::UnionArray</code>.\nThe implementation of <code>Scalar</code> for utf8, semantically …\nconvert itself to\nthe logical type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether it is valid\nreturns a new <code>DictionaryScalar</code>\nReturns a new <code>PrimitiveScalar</code>.\nReturns a new <code>Utf8Scalar</code>\nReturns a new <code>BinaryScalar</code>.\nReturns a new <code>BooleanScalar</code>\nreturns a new <code>ListScalar</code>\nreturns a new <code>MapScalar</code>\nA new <code>NullScalar</code>\nReturns a new <code>StructScalar</code>\nreturns a new <code>FixedSizeListScalar</code>\nReturns a new <code>FixedSizeBinaryScalar</code>.\nReturns a new <code>UnionScalar</code>\ncreates a new <code>Scalar</code> from an <code>Array</code>.\nReturns a new <code>PrimitiveScalar</code> with the same value but …\nReturns the type of the union scalar\nThe values of the <code>DictionaryScalar</code>\nReturns the optional value.\nReturns the value irrespectively of the validity.\nIts value\nThe value\nIts value\nReturns the inner value\nThe values of the <code>ListScalar</code>\nThe values of the <code>MapScalar</code>\nReturns the values irrespectively of the validity.\nThe values of the <code>FixedSizeListScalar</code>\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of seconds in a day\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nParses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nCalculates the scale factor between two TimeUnits. The …\nParses a <code>Utf8Array</code> to naive timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nAn iterator of known, fixed size. A trait denoting Rusts’…\nA chunk of bits. This is used to create masks of a given …\nAn [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …\nAn [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code> returning the …\nType denoting its representation as bytes. This is <code>[u8; N]</code> …\nTwo i32 representing days and ms\nThe difference between 1.0 and the next largest …\nA 16-bit floating point number.\nA 32-bit floating point number.\nA 64-bit floating point number.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…\nRange of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 64-bit integer.\nA signed 8-bit integer.\nmonths_days_ns(i32, i32, i64)\nSealed trait implemented by all physical types that can be …\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nThe corresponding variant of <code>PrimitiveType</code>.\nThe set of all implementations of the sealed trait …\nAn unsigned 16-bit integer.\nAn unsigned 32-bit integer.\nAn unsigned 64-bit integer.\nAn unsigned 8-bit integer.\nThe number of days\nThe number of days\nThe in-memory representation of the DayMillisecond variant …\nType representation of the Float16 physical type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from <code>usize</code>.\nFrom bytes in big endian\nCasts from u16.\nCasts an <code>f32</code> into <code>f16</code>\nFrom bytes in little endian\nconvert itself from bytes.\nConvert itself from <code>usize</code>.\nReturns a new <code>i256</code> from two <code>i128</code>.\nPhysical representation of a decimal\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of milliseconds\nThe number of months\nThe in-memory representation of the MonthDayNano variant …\nCreates a new <code>BitChunkIter</code> with <code>len</code> bits.\nCreates a new <code>BitChunkOnes</code> with <code>len</code> bits.\nReturns a new <code>IndexRange</code>.\nA new <code>days_ms</code>.\nA new <code>months_days_ns</code>.\nThe number of nanoseconds\nAn iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.\nContains traits and implementations of multi-data used in …\nTo bytes in big endian\nCasts to u16.\nCasts this <code>f16</code> to <code>f32</code>\nTo bytes in little endian\nconvert itself into bytes.\nConvert itself to <code>usize</code>.\nThe type holding bits for masks.\nDescribes the ability to convert itself from a <code>BitChunk</code>.\nNumber of lanes\nType used for masking.\nThe <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …\nA struct that lends itself well to be compiled leveraging …\nTrait implemented by some <code>NativeType</code> that have a SIMD …\nThe SIMD type associated with this trait. This type …\nReturns a tuple of 3 items whose middle item is itself, …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from a slice.\nConvert itself from a slice.\ncreates a new Self from <code>v</code> by populating items from <code>v</code> up to …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMulti-Data correspondence of the native type\nSets values to <code>default</code> based on <code>mask</code>.\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nAlways flushes ASAP.\nA trait representing an immutable Arrow array. Arrow …\nThe key used to identify a Rerun <code>EntityPath</code> in chunk-level …\nThe key used to identify the size in bytes of the data, …\nThe key used to identify a Rerun <code>ChunkId</code> in chunk-level …\nThe marker used to identify whether a chunk is sorted in …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nHelper to incrementally build a <code>Chunk</code>.\nThe actual iterator implementation for …\nThe underlying item type for <code>ChunkComponentIter</code>.\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>crate::Chunk</code>.\nA simple type alias for an <code>Arc&lt;Chunk&gt;</code>.\nThe fully-qualified name of a <code>Component</code>, e.g. …\nDefault configuration, applicable to most use cases.\nEnvironment variable to configure …\nEnvironment variable to configure <code>Self::flush_num_bytes</code>.\nEnvironment variable to configure <code>Self::flush_num_rows</code>.\nEnvironment variable to configure <code>Self::flush_tick</code>.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nContains the error value\nContains the error value\nThe key used to identify the kind of a Rerun column in …\nThe marker used to identify whether a column is sorted in …\nThe value used to identify a Rerun control column in …\nThe value used to identify a Rerun data column in …\nThe value used to identify a Rerun time column in …\nA query at a given time, for a given timeline.\nNever flushes unless manually told to (or hitting one the …\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA query over a time range, for a given timeline.\nA unique ID for a row’s worth of data within a chunk.\nError spawning one of the background threads.\nHelper to incrementally build a <code>TimeColumn</code>.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nA <code>ChunkShared</code> that is guaranteed to always contain a …\nReturns a copy of <code>self</code>, overriding existing fields with …\nConverts itself to a reference of <code>Any</code>, which enables …\nConverts itself to a mutable reference of <code>Any</code>, which …\nBuilds and returns the final <code>Chunk</code>.\nBuilds and returns the final <code>TimeColumn</code>.\nBuilds and returns the final <code>Chunk</code>.\nInitializes a new <code>TimeColumnBuilder</code>.\nSplit a chunk if it contains &gt;= rows than this threshold …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns a <em>shared</em> channel in which are sent the batched …\nIterates all columns of the specified <code>kind</code>.\nReturns the first common ancestor of two paths.\nReturns the first common ancestor of a list of entity …\nIterates all data columns present in this chunk.\nThe component data.\nConcatenates two <code>TimeColumn</code>s into a new one.\nIterates all control columns present in this chunk.\nAll the control, time and component data.\nThe <code>DataType</code> of the <code>Array</code>. In combination with …\nWeb URL to the Rerun documentation for this component.\nEmpties the <code>TimeColumn</code> vertically.\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nInitiates a flush of the pipeline and returns immediately.\nInitiates a flush the batching pipeline and waits for it …\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>TransportChunk</code> from an arrow-rs <code>RecordBatch</code>.\nCreates a new <code>ChunkBatcherConfig</code> using the default values, …\nTreat the file path as an entity path hierarchy.\nTreat the file path as one opaque string.\nTreat the string as one opaque string, NOT splitting on …\nReturns the fully-qualified name, e.g. …\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed 64-bit hash.\nCallbacks you can install on the <code>ChunkBatcher</code>.\nIf true, the results will include one extra tick on each …\nHelper function to iterate over all incremental <code>EntityPath</code>…\nIf this is an indicator component, for which archetype?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn a single row into a <code>Chunk</code> of its own.\nIs this a direct child of the other path.\nIs this a strict descendant of the given path.\nwhether the array is empty\nIs this an indicator component for an archetype?\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nIs the timeline sorted?\nLooks in the chunk metadata for the <code>IS_SORTED</code> marker.\nLike <code>Self::is_sorted</code>, but actually checks the entire …\nReturns whether slot <code>i</code> is valid.\nShould the results contain all extra component information …\nShould the results contain all extra timeline information …\nThe length of the <code>Array</code>. Every array has a length …\nNumber of parts\nThis turns a batch of <code>PendingRow</code>s into a <code>Chunk</code>.\nDetermine if component matches a string\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nInitializes a new <code>ChunkBuilder</code>.\nInitializes a new <code>TimeColumnBuilder</code>.\nCreates a new <code>TimeColumn</code>.\nCreates a new <code>ChunkBatcher</code> using the passed in <code>config</code>.\nCreates a new <code>TimeColumn</code> of nanoseconds type.\nCreates a new <code>TimeColumn</code> of sequence type.\nCreates a new <code>TimeColumn</code> of sequence type.\nThe number of null slots on this <code>Array</code>.\nHow many columns in total? Includes control, time, and …\nReturn <code>None</code> if root.\nParses an entity path, handling any malformed input with a …\nParse an entity path from a string, with strict checks for …\nPushes a <code>PendingRow</code> down the batching pipeline.\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nSlices the <code>TimeColumn</code> vertically.\nReturns an error if the Chunk’s invariants are not …\nThe schema of the dataframe, and all chunk-level and …\nReturns the unqualified name, e.g. <code>Position2D</code>.\nReturns short names for a collection of entities based on …\nSlices this <code>Array</code>.\nSlices the <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nIs this equals to, or a descendant of, the given path.\nComputes the time range covered by each individual …\nIterates all timeline columns present in this chunk.\nUser-specified <code>TimePoint</code> for this event.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nCreate an arrow-rs <code>RecordBatch</code> containing the data from …\nComputes the union of two <code>TimePoint</code>s, keeping the maximum …\nThe validity of the <code>Array</code>: every array has an optional …\nAdd a row’s worth of data by destructuring an archetype …\nAdd a row’s worth of data by serializing a single …\nAdd a row’s worth of data by serializing many …\nAdd a row’s worth of data using the given component data.\nAdd a row’s worth of time data using the given timestamp.\nAdd a row’s worth of data by serializing many sparse …\nAdd a row’s worth of data using the given sparse …\nClones this <code>Array</code> with a new new assigned bitmap.\nAtomic types.\nCreates a new scope for spawning threads.\nSelects from a set of channel operations.\nThread synchronization primitives.\nThreads that can borrow variables from the stack.\nMiscellaneous utilities.\nA thread-safe mutable memory location.\nTrait which allows reading from primitive atomic types …\nType returned by <code>load_consume</code>.\nReturns a raw pointer to the underlying data in this …\nIf the current value equals <code>current</code>, stores <code>new</code> into the …\nIf the current value equals <code>current</code>, stores <code>new</code> into the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nApplies logical “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies logical “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies logical “or” to the current value and returns …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nFetches the value, and applies a function to it that …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies logical “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nReturns <code>true</code> if operations on values of this type are …\nLoads a value from the atomic cell.\nLoads a value from the atomic using a “consume” memory …\nCreates a new atomic cell initialized with <code>val</code>.\nStores <code>val</code> into the atomic cell.\nStores <code>val</code> into the atomic cell and returns the previous …\nTakes the value of the atomic cell, leaving …\nThe message could not be sent because the channel is …\nThe message could not be sent because the channel is …\nThe message could not be received because the channel is …\nThe message could not be received because the channel is …\nA message could not be received because the channel is …\nThe message could not be sent because the channel is full.\nA blocking iterator over messages in a channel.\nA blocking iterator over messages in a channel.\nAn error returned from the <code>ready_timeout</code> method.\nThe receiving side of a channel.\nAn error returned from the <code>recv</code> method.\nAn error returned from the <code>recv_timeout</code> method.\nSelects from a set of channel operations.\nAn error returned from the <code>select_timeout</code> method.\nA selected operation that needs to be completed.\nAn error returned from the <code>send</code> method.\nAn error returned from the <code>send_timeout</code> method.\nThe sending side of a channel.\nThe message could not be sent because the channel is full …\nA message could not be received because the channel is …\nA non-blocking iterator over messages in a channel.\nAn error returned from the <code>try_ready</code> method.\nAn error returned from the <code>try_recv</code> method.\nAn error returned from the <code>try_select</code> method.\nAn error returned from the <code>try_send</code> method.\nCreates a receiver that delivers a message after a certain …\nCreates a receiver that delivers a message at a certain …\nCreates a channel of bounded capacity.\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index of the selected operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message.\nUnwraps the message.\nUnwraps the message.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation timed out.\nReturns <code>true</code> if the receive operation timed out.\nA blocking iterator over messages in the channel.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nCreates a receiver that never delivers messages.\nCreates an empty list of channel operations for selection.\nBlocks until one of the operations becomes ready.\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nBlocks the current thread until a message is received or …\nAdds a receive operation.\nCompletes the receive operation.\nWaits for a message to be received from the channel, but …\nWaits for a message to be received from the channel, but …\nRemoves a previously added operation.\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nBlocks until one of the operations becomes ready and …\nSelects from a set of channel operations.\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nBlocks the current thread until a message is sent or the …\nAdds a send operation.\nCompletes the send operation.\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nCreates a receiver that delivers messages periodically.\nA non-blocking iterator over messages in the channel.\nAttempts to find a ready operation without blocking.\nAttempts to receive a message from the channel without …\nAttempts to select one of the operations without blocking.\nAttempts to send a message into the channel without …\nCreates a channel of unbounded capacity.\nThe queue was empty at the time of stealing.\nAn injector queue.\nThe steal operation needs to be retried.\nPossible outcomes of a steal operation.\nA stealer handle of a worker queue.\nAt least one task was successfully stolen.\nA worker queue.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsumes items until a <code>Success</code> is found and returns it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue was empty at the time of …\nReturns <code>true</code> if the steal operation needs to be retried.\nReturns <code>true</code> if at least one task was stolen.\nReturns the number of tasks in the deque.\nReturns the number of tasks in the deque.\nReturns the number of tasks in the queue.\nCreates a new injector queue.\nCreates a FIFO worker queue.\nCreates a LIFO worker queue.\nIf no task was stolen, attempts another steal operation.\nPops a task from the queue.\nPushes a task into the queue.\nPushes a task into the queue.\nSteals a task from the queue.\nSteals a task from the queue.\nSteals a batch of tasks and pushes them into another …\nSteals a batch of tasks and pushes them into a worker.\nSteals a batch of tasks, pushes them into another worker, …\nSteals a batch of tasks, pushes them into a worker, and …\nSteals no more than <code>limit</code> of tasks and pushes them into …\nSteals no more than of tasks and pushes them into a worker.\nSteals no more than <code>limit</code> of tasks, pushes them into …\nSteals no more than <code>limit</code> of tasks, pushes them into a …\nCreates a stealer for this queue.\nReturns the result of the operation, if successful.\nThe alignment of pointer.\nAn atomic pointer that can be safely shared between …\nAn epoch-based garbage collector.\nThe error returned on failed compare-and-set operation.\nMemory orderings for compare-and-set operations.\nThe error returned on failed compare-and-swap operation.\nA guard that keeps the current thread pinned.\nThe type for initializers.\nA handle to a garbage collector.\nAn owned heap-allocated object.\nTypes that are pointed to by a single word.\nA trait for either <code>Owned</code> or <code>Shared</code> pointers.\nA pointer to an object protected by the epoch GC.\nConverts the pointer to a raw pointer (without the tag).\nConverts the pointer to a reference.\nReturns a copy of the atomic value.\nCreates another reference to the same garbage collector.\nReturns the <code>Collector</code> associated with this handle.\nReturns the <code>Collector</code> associated with this guard.\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nThe value in the atomic pointer at the time of the failed …\nThe value in the atomic pointer at the time of the failed …\nReturns the default global collector.\nStores a function so that it can be executed at some point …\nStores a destructor for an object so that it can be …\nStores a function so that it can be executed at some point …\nDereferences the given pointer.\nDereferences the pointer.\nMutably dereferences the given pointer.\nDereferences the pointer.\nDrops the object pointed to by the given pointer.\nChecks if both handles point to the same collector.\nThe ordering of the operation when it fails.\nBitwise “and” with the current tag.\nBitwise “or” with the current tag.\nFetches the pointer, and then applies a function to it …\nBitwise “xor” with the current tag.\nClears up the thread-local cache of deferred functions by …\nReturns the argument unchanged.\nReturns a new atomic pointer pointing to <code>owned</code>.\nReturns a new atomic pointer pointing to <code>raw</code>.\nReturns the argument unchanged.\nReturns a new atomic pointer pointing to <code>ptr</code>.\nReturns the argument unchanged.\nReturns a new owned pointer pointing to <code>b</code>.\nReturns the argument unchanged.\nReturns a new pointer pointing to <code>raw</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new owned pointer pointing to <code>raw</code>.\nReturns a new pointer pointing to the tagged pointer <code>data</code>.\nReturns a new pointer pointing to the tagged pointer <code>data</code>.\nInitializes a with the given initializer.\nAllocates <code>value</code> on the heap and returns a new atomic …\nAllocates <code>value</code> on the heap and returns a new owned …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the owned pointer into a <code>Box</code>.\nTakes ownership of the pointee.\nTakes ownership of the pointee.\nConverts the owned pointer into a <code>Shared</code>.\nReturns the machine representation of the pointer.\nReturns <code>true</code> if the pointer is null.\nReturns <code>true</code> if the current thread is pinned.\nReturns <code>true</code> if the handle is pinned.\nLoads a <code>Shared</code> from the atomic pointer.\nLoads a <code>Shared</code> from the atomic pointer using a “consume…\nAllocates <code>value</code> on the heap and returns a new atomic …\nAllocates <code>value</code> on the heap and returns a new owned …\nCreates a new collector.\nThe new value, which the operation failed to store.\nThe new value, which the operation failed to store.\nReturns a new null atomic pointer.\nReturns a new null pointer.\nPins the current thread.\nPins the handle.\nRegisters a new handle for the collector.\nUnpins and then immediately re-pins the thread.\nTemporarily unpins the thread, executes the given function …\nStores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.\nThe ordering of the operation when it succeeds.\nStores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …\nReturns the tag stored within the pointer.\nReturns the tag stored within the pointer.\nTakes ownership of the pointee if it is non-null.\nTakes ownership of the pointee if it is not null.\nReturns a reference to a dummy guard that allows …\nReturns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …\nReturns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …\nA bounded multi-producer multi-consumer queue.\nAn unbounded multi-producer multi-consumer queue.\nReturns the capacity of the queue.\nPushes an element into the queue, replacing the oldest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is full.\nReturns the number of elements in the queue.\nReturns the number of elements in the queue.\nCreates a new bounded queue with the given capacity.\nCreates a new unbounded queue.\nAttempts to pop an element from the queue.\nPops an element from the queue.\nAttempts to push an element into the queue.\nPushes an element into the queue.\nA thread parking primitive.\nA sharded reader-writer lock.\nA guard used to release the shared read access of a …\nA guard used to release the exclusive write access of a …\nUnparks a thread parked by the associated <code>Parker</code>.\nEnables threads to synchronize the beginning or end of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a raw pointer into a <code>Parker</code>.\nConverts a raw pointer into an <code>Unparker</code>.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this lock, returning the underlying data.\nConverts a <code>Parker</code> into a raw pointer.\nConverts an <code>Unparker</code> into a raw pointer.\nReturns <code>true</code> if the lock is poisoned.\nCreates a new <code>Parker</code>.\nCreates a new sharded reader-writer lock.\nCreates a new wait group and returns the single reference …\nBlocks the current thread until the token is made …\nBlocks the current thread until the token is made …\nBlocks the current thread until the token is made …\nLocks with shared read access, blocking the current thread …\nAttempts to acquire this lock with shared read access.\nAttempts to acquire this lock with exclusive write access.\nAtomically makes the token available if it is not already.\nReturns a reference to an associated <code>Unparker</code>.\nDrops this reference and waits until all other references …\nLocks with exclusive write access, blocking the current …\nA scope for spawning threads.\nA handle that can be used to join its scoped thread.\nConfigures the properties of a new thread.\nCreates a builder that can configure a thread before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWaits for the thread to finish and returns its result.\nSets the name for the new thread.\nCreates a new scope for spawning threads.\nSpawns a scoped thread.\nSpawns a scoped thread with this configuration.\nSets the size of the stack for the new thread.\nReturns a handle to the underlying thread.\nPerforms exponential backoff in spin loops.\nPads and aligns a value to the length of a cache line.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value.\nReturns <code>true</code> if exponential backoff has completed and …\nCreates a new <code>Backoff</code>.\nPads and aligns a value to the length of a cache line.\nResets the <code>Backoff</code>.\nBacks off in a blocking loop.\nBacks off in a lock-free loop.\nRefer to all instances in a batch.\nThe user-chosen name of the application doing the logging.\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nMessage containing an Arrow payload\nLog an entity using an <code>ArrowMsg</code>.\nData associated with the blueprint state.\nCommand used for activating a blueprint once it has been …\nSend after all messages in a blueprint to signal that the …\nThe official Rerun C Logging SDK\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nA signed duration represented as nanoseconds since unix …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA set of substitutions for entity paths.\nLoading a file via CLI, drag-and-drop, a file-dialog, etc.\nA unique numeric index for each individual instance within …\nThe most general log message sent from the SDK to the …\nSometimes used as the hash of <code>None</code>.\nAn integer that is known not to equal its minimum value.\nPerhaps from some manual data ingestion?\nThe official Rerun Python Logging SDK\nA recording of user-data.\nLike <code>ResolvedTimeRange</code>, but using <code>TimeReal</code> for improved …\nThe official Rerun Rust Logging SDK\nUsed e.g. for frames in a film.\nA new recording has begun.\nA unique id per store.\nInformation about a recording or blueprint.\nWhat kind of Store this is.\nThe source of a recording or blueprint.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nEither nanoseconds or sequence numbers.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSeconds since unix epoch\nExtends <code>VecDeque</code> with extra insertion routines.\nExtends <code>VecDeque</code> with extra removal routines.\nExtends <code>VecDeque</code> with extra sorting routines.\nGenerated from the viewer itself.\nThe union of all rules\nInclude this entity, but not the subtree.\nInclude this entity with subtree.\nCreates a filter that accepts everything.\nThe user-chosen name of the application doing the logging.\n<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …\nThe blueprint this command refers to.\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …\nData for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nIf this store is the result of a clone, which store was it …\nMost specific last, which means recursive first.\n“color”\nInclusive\nIs there any rule for this entity path?\n<code>camera / &quot;left&quot; / points / #42</code>\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nBuild a <code>Vec&lt;EntityPathPart&gt;</code>:\nUse this when it is part of a full entity path.\nMatch this path, but not children.\nExample components to be used for tests and docs\nHuman-readable formatting\nUseful when showing dates/times on a timeline and you want …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSaturating cast\nSaturating cast\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Instance</code> that identifies a 2D coordinate.\nBuild a filter from a list of query expressions.\nBuild a filter from a list of query expressions.\nFor instance:\nFrom an existing u64. Use this only for data conversions.\nReturns the value as a primitive type.\nIf true, ALSO include children and grandchildren of this …\nMatch this path and any entity in its subtree.\nInserts multiple elements at <code>index</code> within the deque, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhere in the range is this value? Returns 0-1 if within …\nIf true, this time is likely relative to unix epoch.\nAre we referring to all instances of the entity (e.g. all …\nIs anything under this path included (including self)?\nWhether this <code>StoreInfo</code> is the default used when a user is …\nIs this entity path explicitly excluded?\nIs this entity path explicitly included?\nTrue if the recording is one of the official Rerun …\nCheck whether <code>self</code> is sorted.\nAre we referring to a specific instance of the entity …\nChecks whether this results of this filter “fully contain…\nThe amount of time or sequences covered by this range.\ne.g. 3\nImmediately make <code>blueprint_id</code> the active blueprint for its …\nImmediately make this the active blueprint for the …\nMake <code>blueprint_id</code> the default blueprint for its associated …\nMake this the default blueprint for the <code>app_id</code>.\nDoes this filter include the given entity path?\nIs there a rule for this exact entity path (ignoring …\ne.g. 11\nFind the most specific matching rule and return its effect.\nThe given string is expected to be unescaped, i.e. any <code>\\</code> …\nCreates a new non-min if the given value is not the …\nCreates a new non-min without checking the value.\nCreate a new set of substitutions from a single origin.\nParse an entity path filter from a string while ignore …\nUnescape the string, forgiving any syntax error with a …\nUnescape the string, forgiving any syntax error with a …\nParse an entity path filter from a string, returning an …\nUnescape the string, returning errors on wrongly escaped …\ne.g. 0\nEvery logged entity in Rerun is logged to an <code>EntityPath</code>.\nRemoves and returns the elements in the given <code>range</code> from …\nRemove any rule for the given entity path (ignoring …\nRemove a subtree and any existing rules that it would …\nA time-based UID that is only used to help keep track of …\nSchema for all control &amp; data columns.\nCreates a new entity path filter that includes only a …\nSorts <code>self</code>.\nReturns <code>None</code> if <code>ALL</code>, otherwise the index.\nSplits the deque into two at the given index.\nWhen the recording started.\nShould be unique for each recording.\nThe Rerun version used to encoded the RRD data.\nCreates a new entity path filter that includes a single …\ne.g. <code>a0</code> for alpha releases.\nThe union of all rules\nRemoves an element from anywhere in the deque and returns …\nThe maximum values for all timelines across the entire …\nRetrieves 2D image coordinates (x, y) encoded in an …\nReturns the absolute datetime if applicable.\nThe style of string to use in a UI\nThe unescaped string.\nThe default <code>ApplicationId</code> if the user hasn’t set one.\nLLVM version of the code compiling the Rust SDK\nRust version of the code compiling the Rust SDK\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nMessage containing an Arrow payload\nData for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nSchema for all control &amp; data columns.\nThe maximum values for all timelines across the entire …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll ones.\nAll zeroes.\nReturns the argument unchanged.\nConstruct a <code>Tuid</code> from the upper and lower halves of a …\nReturns the total size of <code>self</code> on the heap, in bytes.\nThe increment part of the <code>Tuid</code>.\nReturns the <code>n</code>-next logical <code>Tuid</code>.\nCalls <code>U::from(self)</code>.\nApproximate nanoseconds since unix epoch.\nCreate a new unique <code>Tuid</code> based on the current time.\nReturns the next logical <code>Tuid</code>.\nA shortened string representation of the <code>Tuid</code>.\nAn archetype is a high-level construct that represents a …\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nApproximations of stack and heap size for both internal …\nThe unique name of a space view type.\nViews are the panels shown in the viewer’s viewport and …\nReturns the names of all components that must, should and …\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nReturns the <em>unresolved</em> backtrace associated with this …\nReturns the <em>unresolved</em> backtrace associated with this …\nCast POD (plain-old-data) types to another POD type.\nCast POD (plain-old-data) types to <code>u8</code>.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReadable name for displaying in ui.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nReturns the total size of <code>self</code> on the heap, in bytes.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs <code>Self</code> just plain old data?\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this loggable, e.g. …\nThe fully-qualified name of this batch, e.g. …\nCreate an array of indicator components of this type with …\nThe number of instances of T stored in this buffer.\nReturns the names of all components that <em>may</em> be provided …\nReturns the names of all components that <em>should</em> be …\nRun-time reflection for reading meta-data about components …\nReturns the names of all components that <em>must</em> be provided …\nReturns the unqualified name, e.g. <code>Points3D</code>.\nReturns the unqualified name, e.g. <code>Vec2D</code>.\nThe number of bytes stored in this buffer\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nReturns the total size of <code>self</code> on the stack, in bytes.\nUseful macro for staticlly asserting that a <code>struct</code> …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nReturns the total size of <code>self</code> in bytes, accounting for …\n<strong>Archetype</strong>: Empties all the components of an entity.\nThe total number of components in the archetype: 1 …\nReturns a non-recursive clear.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Clear</code>.\nReturns a recursive clear.\n<strong>Component</strong>: Configures how a clear operation should behave …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA range of zero length exactly at the time cursor.\nPut the boundary at the current time cursor.\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\nThe range encompassing all time, from -∞ to +∞.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nReturns the correct time assuming this boundary is an end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nReturns the time assuming this boundary is a start …\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nGet the backtrace for this Error.\nReturn early with an error.\nAn iterator of the chain of source errors contained by …\nWrap the error value with additional context.\nWrap the error value with additional context.\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nConstruct an ad-hoc error from a string or existing non-…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nThe lowest level cause of this error — this error’s …\nWrap the error value with additional context that is …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nFind an <code>ArchetypeReflection</code> based on its short name.\nThe type of the field (it’s always a component).\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a required component?\nPlaceholder value, used whenever no fallback was provided …\nIterate over this archetype’s required fields.\nAll variants, in the order they appear in the enum.\n128-bit hash. Negligible risk for collision.\n64-bit hash.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom an existing u64. Use this only for data conversions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA set of substitutions for entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nIf true, ALSO include children and grandchildren of this …\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nCreate a sparse dictionary-array out of an array of …\nCreate a sparse list-array out of an array of arrays.\nCreate a sparse list-array out of an array of arrays.\nApplies a filter kernel to the given <code>array</code>.\nReturns true if the given <code>list_array</code> is semantically empty.\nReturns a new <code>ArrowListArray</code> with len <code>entries</code>.\nCreate a new <code>ListArray</code> of target length by appending null …\nCreate a new <code>ListArray</code> of target length by appending null …\nGiven a sparse <code>ArrowListArray</code> (i.e. an array with a …\nApplies a take kernel to the given <code>array</code>.\nCompression format used.\nError creating the file.\nStream log messages to an <code>.rrd</code> file.\nErrors that can occur when creating a <code>FileSink</code>.\nVery fast compression and decompression, but not very good …\nError encoding a log message.\nOn failure to decode <code>EncodingOptions</code>\nHow we serialize the data\nError spawning the file writer thread.\nDecoding <code>LogMsg</code>:es from <code>.rrd</code> files/streams.\nEncoding of <code>LogMsg</code>es as a binary stream, e.g. to store in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart writing log messages to a file at the given path.\nStart writing log messages to standard output.\nOn failure to encode or serialize a <code>LogMsg</code>.\nReturn <code>DecodeError::IncompatibleRerunVersion</code> if the …\nHow to handle version mismatches during decoding.\nWarn if the versions don’t match, but continue loading.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a new decoder.\nInstantiates a new concatenated decoder.\nReturns the size in bytes of the data that has been …\nReturns the Rerun version that was used to encode the data …\nThe stream decoder is a state machine which ingests byte …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn <code>Encoder</code> that properly closes the stream on drop.\nOn failure to encode or serialize a <code>LogMsg</code>.\nEncode a stream of <code>LogMsg</code> into an <code>.rrd</code> file.\nReturns the size in bytes of the encoded data.\nReturns the size in bytes of the encoded data.\nReturns the size in bytes of the encoded data.\nReturns the size in bytes of the encoded data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSomething went wrong. End of stream.\nAn intermediate message when decoding an rrd file fetched …\nThe next <code>LogMsg</code> in the decoding stream.\nEverything has been successfully decoded. End of stream.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream an rrd file from a HTTP server.\nUniquely identifies cached query results in the <code>Caches</code>.\nStats for a single <code>crate::RangeCache</code>.\nStats for all primary caches.\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nContains the error value\nResults for a latest-at query.\nContains the success value\nResults for a range query.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nReturns the deserialized data for the specified component.\nReturns the deserialized data for the specified component.\nReturns the raw data for the specified component.\nReturns the deserialized data for the specified component.\nReturns the deserialized data for the specified component …\nReturns the deserialized data for the specified component …\nReturns the raw data for the specified component at the …\nReturns the raw data for the specified component at the …\nReturns the raw data for the specified component at the …\nReturns the deserialized data for the specified component …\nReturns the deserialized data for the specified component, …\nReturns the deserialized data for the specified component, …\nReturns the raw data for the specified component, assuming …\nReturns the raw data for the specified component, assuming …\nReturns the raw data for the specified component, assuming …\nReturns the deserialized data for the specified component, …\nReturns the <code>RowId</code> for the specified component.\nResults for each individual component.\nResults for each individual component.\nThe compound index of this query result.\nThe associated <code>EntityPath</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>UnitChunkShared</code> for the specified <code>Component</code>.\nReturns the <code>Chunk</code>s for the specified <code>component_name</code>.\nReturns the <code>UnitChunkShared</code> for the specified <code>Component</code>.\nReturns the <code>Chunk</code>s for the specified <code>component_name</code>.\nReturns the compound index (<code>(TimeInt, RowId)</code> pair) of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueries for the given <code>component_names</code> using latest-at …\nFree up some RAM by forgetting the older parts of all …\nThe query that yielded these results.\nThe query that yielded these results.\nQueries for the given <code>component_names</code> using range …\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nComputes the stats for all primary caches.\nWhat is the actual size of this cache after deduplication?\nHow many chunks in the cache?\nWhat would be the size of this cache in the worst case, …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nAuto-generated blueprint-related types.\n<strong>Archetype</strong>: The description of a container.\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Shared state for the 3 collapsible panels.\n<strong>Archetype</strong>: The top-level description of the viewport.\nWhich tab is active.\nWhether the viewport layout is determined automatically.\nWhether or not space views should be created automatically.\nThe layout shares of each column in the container.\nThe class of the view.\n<code>ContainerId</code>s or <code>SpaceViewId</code>s that are children of this …\nThe name of the container.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow many columns this grid should have.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShow one tab as maximized?\nCreate a new <code>ContainerBlueprint</code>.\nCreate a new <code>PanelBlueprint</code>.\nCreate a new <code>ViewportBlueprint</code>.\nHashes of all recommended space views the viewer has …\nThe layout of the space-views\nThe layout shares of each row of the container.\nWhether this container is visible.\nWhich tab is active.\nWhether the viewport layout is determined automatically.\nWhether or not space views should be created automatically.\nThe layout shares of each column in the container.\n<code>ContainerId</code>s or <code>SpaceViewId</code>s that are children of this …\nThe name of the container.\nHow many columns this grid should have.\nShow one tab as maximized?\nHashes of all recommended space views the viewer has …\nThe layout of the space-views\nThe layout shares of each row of the container.\nWhether this container is visible.\n<strong>Component</strong>: The active tab in a tabbed container.\n<strong>Component</strong>: Whether empty cells in a dataframe should be …\n<strong>Component</strong>: Whether the viewport layout is determined …\n<strong>Component</strong>: Whether or not space views should be created …\n<strong>Component</strong>: The type of the background in a view.\nVisible, but as small as possible on its shorter axis.\n<strong>Component</strong>: The layout share of a column in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\n<strong>Component</strong>: The kind of a blueprint container (tabs, grid, …\n<strong>Component</strong>: One of four 2D corners, typically used to align …\nFully expanded.\nScale the image for the largest possible fit in the view’…\nScale the image for the largest possible fit in the view’…\n<strong>Component</strong>: Configuration for a filter-by-range feature of …\n<strong>Component</strong>: Configuration for the filter is not null …\nA bright gradient.\nA dark gradient.\nOrganize children in a grid layout\n<strong>Component</strong>: How many columns a grid container should have.\nCompletely hidden.\nOrder the children left to right\n<strong>Component</strong>: All the contents in the container.\n<strong>Component</strong>: The unique id of a space view, used to refer to …\n<strong>Component</strong>: Whether the entity can be interacted with.\nLeft bottom corner.\nLeft top corner.\n<strong>Component</strong>: Indicate whether the range should be locked …\nNo scaling, pixel size will match the image’s …\n<strong>Component</strong>: Tri-state for panel controls.\n<strong>Component</strong>: An individual query expression used to filter a …\nRight bottom corner.\nRight top corner.\n<strong>Component</strong>: The container that sits at the root of a …\n<strong>Component</strong>: The layout share of a row in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\nSimple uniform color.\n<strong>Component</strong>: The class identifier of view, e.g. <code>&quot;2D&quot;</code>, …\n<strong>Component</strong>: Whether a space view is maximized.\n<strong>Component</strong>: The origin of a <code>SpaceView</code>.\nPut children in separate tabs\n<strong>Component</strong>: Show a slider for the index of some dimension …\n<strong>Component</strong>: A timeline identified by its name.\nOrder the children top to bottom\n<strong>Component</strong>: Determines whether an image or texture should …\n<strong>Component</strong>: Hash of a viewer recommendation.\n<strong>Component</strong>: Whether the container, view, entity or instance …\n<strong>Component</strong>: The range of values on a given timeline that …\n<strong>Component</strong>: Visual bounds in 2D space used for <code>Spatial2DView</code>…\n<strong>Component</strong>: Override the visualizers for an entity.\nIs the filter active?\nComponent name of the filter column.\nEntity path of the filter column.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Self</code> from a <code>re_log_types::Timeline</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if self is <code>PanelState::Expanded</code>\nReturns <code>true</code> if self is <code>PanelState::Hidden</code>\nCreate a <code>Self</code> from an <code>EntityPath</code> and a …\nCreate a new range filter with the provided time …\nCreate a new <code>Self</code>.\nCreates a new <code>TensorDimensionIndexSlider</code> to determine the …\nSets the panel to <code>Self::Hidden</code> if it is collapsed or …\n<strong>Datatype</strong>: A list of strings of text, encoded as UTF-8.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterates through the list of strings as Rust <code>str</code> …\nIf true, we hide the native window decoration (the top bar …\nExtension trait for <code>egui::Context</code>.\nThe look and feel of the UI.\nIf true, we fill the entire window, except for the …\nNewtype over <code>egui::Key</code> which provides a <code>Display</code> …\nThe style of a label.\nNewtype over <code>egui::Modifiers</code> which provides a <code>Display</code> …\nNewtype over <code>egui::PointerButton</code> which provides a <code>Display</code> …\nIf true, we show the native window decorations/chrome with …\nRegular style for a label.\nA collapsible section header, with support for optional …\nAll the commands we support.\nInterface for sending <code>UICommand</code> messages.\nRerun custom extensions to <code>egui::Ui</code>.\nLabel displaying the placeholder text for a yet unnamed …\nApply the Rerun design tokens to the given egui context …\nFor the streams view (time panel)\nDraw a bullet (for text lists).\nSet the button to be shown in the header.\nCenter the content within <code>egui::Ui::max_rect()</code>.\nReplacement for <code>egui::CollapsingHeader</code> that respect our …\nLayout area to allocate for the collapsing triangle.\nSet the default open state of the section header.\nReturn a reference to the global design tokens structure.\nHelpers for drag and drop support for reordering …\nDraws a shadow into the given rect with the shadow …\nA drop-down menu with a list of options.\nShows a small error label with the given text on hover and …\nShows an error label with the entire error text and copies …\nAdd e.g. “ (Ctrl+F11)“ as a suffix\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the current full-span scope.\nUse the provided range as full span for the nested content.\nCreate a separator similar to <code>egui::Separator</code> but with the …\nWorkaround for putting a label into a grid at the top left …\nHeight of the top bar\nSet the help markdown tooltip to be shown in the header.\nSet the help text tooltip to be shown in the header.\nSet the help UI closure to be shown in the header.\nHovered UI and spatial primitives should have this outline.\nHuman readable unique id\nExtra horizontal space in the top left corner to make room …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSecond-generation list item.\nConvenience function to create a <code>list_item::ListItem</code>.\nConvenience to create a non-interactive, collapsible …\nConvenience for adding a flat non-interactive …\nPopup similar to <code>egui::popup_below_widget</code> but suitable for …\nLoad design tokens from <code>data/design_tokens.json</code>.\nThe color we use to mean “loop all the data”\nThe color we use to mean “loop this selection”\nShow some markdown\nConditionally collapsing header.\nShow this command as a menu-button.\nShow some close/maximize/minimize buttons for the native …\nCreate a new <code>Self</code>.\nPaint a collapsing triangle with rounded corners.\nPaints a time cursor for indicating the time on a time …\nPaint a watermark\nStatic title bar used to separate panels into section.\nStatic title bar used to separate panels into section with …\nHelper for adding a list-item hyperlink.\nConvenience function to create a …\nThe color for the background of …\nStyle <code>egui::Ui::selectable_value</code>s and friends into a …\nTwo-column grid to be used in selection view.\nSelected UI and spatial primitives should have this …\nDisplay the header.\nShow the command palette, if it is visible.\nText format used for regular body.\nText format used for labels referring to keys and buttons.\nUsed by the “add view or container” modal.\nHeight of the title row in the blueprint view and …\nA toast notification system for egui, roughly based on …\nBinary toggle switch.\nHeight of the top-most bar.\nMargin on all sides of views.\nContainer item.\nDrop target information, including where to draw the drop …\nContext information about the hovered item.\nLeaf item.\nRoot container item.\nCompute the geometry of the drag cursor and where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the item being hovered during drag\nY coordinate for drag target indicator\nRange of X coordinates for the drag target indicator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of item is this?\nID of the container just before this item within the …\nDestination container ID\nDestination position within the container\nUsed for HTTP URLs that lead out of the app.\nLink within the viewer\nHuman readable unique id\nThe content needs at least this width for display, but …\nSimple <code>ListItemContent</code> to easily display a button in a …\nContext provided to <code>ListItemContent</code> implementations\n<code>ListItemContent</code> that delegates to a closure.\n<code>ListItemContent</code> that displays the content rect.\nThe content needs exactly this width for display.\nAn <code>super::ItemButton</code> that acts as an action button.\nA button that can be used by a list item.\nAn <code>super::ItemButton</code> that acts as a popup menu.\n<code>ListItemContent</code> that displays a simple label with optional …\nLayout information prepared by <code>list_item_scope</code> to be used …\nContent-generic list item.\n<code>ListItemContent</code> to display property-like, two-column …\nResponses returned by …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nAlways show the buttons.\nBackground area\nResponse from the body, if it was displayed.\nAdd a right-aligned <code>super::ItemButton</code>.\nThe desired width of the content.\nSets text shown when the button is disabled and hovered.\nSets text shown when the button is disabled and hovered.\nMake the item draggable.\nHighlight the item as the current drop target.\nSets whether the button is enabled.\nSets enable/disable state of the button.\nSets enable/disable state of the button.\nOverride the background color for the item.\nOverride the hovered state even if the item is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the hover text of the button.\nSets text shown when the button hovered.\nSets text shown when the button hovered.\nCan the user click and interact with it?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender text in italic.\nResponse from the item itself.\nStyle the label for an unnamed items.\nLayout information to use for rendering.\nThe current list item.\nCreate a scope in which <code>[ListItem]</code>s can be created.\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nSet the minimum desired for the content.\nSet the minimum desired width for the entire content.\nCreate a new <code>ListItem</code> with the given label.\nCalled when the button is clicked.\n0.0 if fully closed, 1.0 if fully open, and something …\nArea available for the content to draw in.\nRegister the desired width of the left column.\nIndicate whether right-aligned space should be reserved …\nList item response.\nSet the selected state of the item.\nDraw the item as part of a flat list.\nDraw the item as a leaf node from a hierarchical list.\nDraw the item as a non-leaf node from a hierarchical list.\nDraw the item with unindented child content.\nDisplay value only for leaf or collapsed items.\nSet the subdued state of the item.\nShould we truncate text if it is too long?\nUI for everything that is after the indent and the …\nDraw the button.\nShow a read-only boolean in the value column.\nShow an editable boolean in the value column.\nShow a read-only color in the value column.\nShow an editable color in the value column.\nProvide a closure to draw the content of the right column.\nShow a static text in the value column.\nShow an editable text in the value column.\nSet the weak state of the item.\nProvide a closure to display on-hover buttons on the right …\nSet the item height.\nProvide an <code>Icon</code> to be displayed on the left of the item.\nProvide an <code>Icon</code> to be displayed on the left of the label.\nProvide a custom closure to draw an icon on the left of …\nProvide a custom closure to draw an icon on the left of …\nShow a modal window with Rerun style.\nHelper object to handle a <code>Modal</code> window.\nResponse returned by <code>Modal::ui</code>.\nSet the default height of the modal window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the content area of the modal for full span …\nWhat the content closure returned, if it was actually run.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum height of the modal window.\nSet the minimum width of the modal window.\nCreate a new modal with the given title.\nOpen the model next time the <code>ModalHandler::ui</code> method is …\nWhether the modal should remain open.\nShow the modal window.\nDraw the modal window, creating/destroying it as required.\nAdds a new toast\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShows and updates all toasts\nThis can be used to show or hide the toast type icon.\nTime to live in seconds.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTry to load the given <code>.blueprint</code> file.\nUsed by <code>eframe</code> to decide where to store the app state.\nGenerates reflection about all known archetypes.\nGenerates reflection about all known components.\nGenerates reflection about all known components.\nDetermine the default path for a blueprint based on its …\nConvert to lowercase and replace any character that is not …\nHelper for screenshotting the entire app\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, temporarily re-style the UI to make it suitable …\nIf true, the screenshotter was told at startup to quit …\nUsed for generating screenshots in dev builds.\nCall once per frame\nThe main Rerun drop-down menu found in the top panel.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNote that we purged memory at this time, to show in stats.\nCall once per frame\nDraw the recording list.\nShow the currently open Recordings in a selectable list. …\nShows the e2e latency.\nShows the latency in the input queue.\nLay out the panel button right-to-left\nShows clickable website link as an image (text doesn’t …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWelcome screen shown in place of the viewport when no data …\nStructure to track both an example description and its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo a HEAD request to get the size of a file.\nMove the egui cursor to the bottom of this example card.\n<code>snake_case</code> version of the example name\nWe do an async HEAD request to get the size of the RRD file\nURL of the source code in GitHub\nhuman-readable version of the example name\nDraw the example section of the welcome screen.\nShow a minimal welcome section.\nShow the welcome section.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhen we have loaded the start of a new recording.\nWhen the viewer is first started")
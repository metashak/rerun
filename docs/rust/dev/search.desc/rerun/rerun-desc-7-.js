searchState.loadedDescShard("rerun", 7, "Used e.g. for frames in a film.\nA new recording has begun.\nA unique id per store.\nInformation about a recording or blueprint.\nWhat kind of Store this is.\nThe source of a recording or blueprint.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nEither nanoseconds or sequence numbers.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSeconds since unix epoch\nExtends <code>VecDeque</code> with extra insertion routines.\nExtends <code>VecDeque</code> with extra removal routines.\nExtends <code>VecDeque</code> with extra sorting routines.\nGenerated from the viewer itself.\nThe amount of time or sequences covered by this range.\nThe union of all rules\nInclude this entity, but not the subtree.\nInclude this entity with subtree.\nCreates a filter that accepts everything.\nThe user-chosen name of the application doing the logging.\n<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …\nThe blueprint this command refers to.\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …\nData for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nIf this store is the result of a clone, which store was it …\nMost specific last, which means recursive first.\n“color”\nInclusive\nDoes this range fully contain the other?\nIs there any rule for this entity path?\n<code>camera / &quot;left&quot; / points / #42</code>\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nBuild a <code>Vec&lt;EntityPathPart&gt;</code>:\nMatch this path, but not children.\nExample components to be used for tests and docs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSaturating cast\nSaturating cast\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a filter from a list of query expressions.\nBuild a filter from a list of query expressions.\nFor instance:\nFrom an existing u64. Use this only for data conversions.\nReturns the value as a primitive type.\nPrecomputed hash of the string.\nIf true, ALSO include children and grandchildren of this …\nMatch this path and any entity in its subtree.\nInserts multiple elements at <code>index</code> within the deque, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhere in the range is this value? Returns 0-1 if within …\nIs anything under this path included (including self)?\nWhether this <code>StoreInfo</code> is the default used when a user is …\nIs this entity path explicitly excluded?\nIs this entity path explicitly included?\nTrue if the recording is one of the official Rerun …\nCheck whether <code>self</code> is sorted.\nChecks whether this results of this filter “fully contain…\nThe amount of time or sequences covered by this range.\ne.g. 3\nImmediately make <code>blueprint_id</code> the active blueprint for its …\nImmediately make this the active blueprint for the …\nMake <code>blueprint_id</code> the default blueprint for its associated …\nMake this the default blueprint for the <code>app_id</code>.\nDoes this filter include the given entity path?\nIs there a rule for this exact entity path (ignoring …\ne.g. 11\nFind the most specific matching rule and return its effect.\nCreates a new non-min if the given value is not the …\nCreates a new temporal <code>ResolvedTimeRange</code>.\nCreates a new non-min without checking the value.\nCreate a new set of substitutions from a single origin.\nParse an entity path filter from a string while ignore …\nParse an entity path filter from a string, returning an …\ne.g. 0\nEvery logged entity in Rerun is logged to an <code>EntityPath</code>.\nThe returned range is guaranteed to never include …\nRemoves and returns the elements in the given <code>range</code> from …\nRemove any rule for the given entity path (ignoring …\nRemove a subtree and any existing rules that it would …\nA time-based UID that is only used to help keep track of …\nSchema for all control &amp; data columns.\nOverwrites the end bound of the range.\nOverwrites the start bound of the range.\nCreates a new entity path filter that includes only a …\nSorts <code>self</code>.\nSplits the deque into two at the given index.\nWhen the recording started.\nShould be unique for each recording.\nThe Rerun version used to encoded the RRD data.\nCreates a new entity path filter that includes a single …\ne.g. <code>a0</code> for alpha releases.\nThe union of all rules\nRemoves an element from anywhere in the deque and returns …\nThe maximum values for all timelines across the entire …\nLLVM version of the code compiling the Rust SDK\nRust version of the code compiling the Rust SDK\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nMessage containing an Arrow payload\nData for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nSchema for all control &amp; data columns.\nThe maximum values for all timelines across the entire …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nContains the <code>Array</code> and <code>MutableArray</code> trait objects …\ncontains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.\nContains <code>Buffer</code>, an immutable container for all Arrow …\nContains <code>Chunk</code>, a container of <code>Array</code> where every array has …\ncontains a wide range of compute operations (e.g. […\nContains all metadata, such as <code>PhysicalType</code>, <code>DataType</code>, …\nDefines <code>Error</code>, representing all errors returned by this …\ncontains FFI bindings to import and export <code>Array</code> via Arrow…\nContains modules to interface with other formats such as […\nMemory maps regions defined on the IPC format into <code>Array</code>.\nContains the declaration of <code>Offset</code>\ncontains the <code>Scalar</code> trait object representing individual …\nConversion methods for dates and times.\nDeclares <code>TrustedLen</code>.\nSealed traits and implementations to handle all <em>physical </em>…\nMisc utilities used in different places in the crate.\nA trait representing an immutable Arrow array. Arrow …\nIterator of values of an <code>ArrayAccessor</code>.\nTrait providing bi-directional conversion between arrow2 …\nA <code>BinaryArray</code> is Arrow’s semantically equivalent of an …\nIterator of values of an <code>BinaryArray</code>.\nA <code>BooleanArray</code> is Arrow’s semantically equivalent of an …\nA type definition <code>PrimitiveArray</code> for <code>days_ms</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>\nAn <code>Array</code> whose values are stored as indices. This <code>Array</code> is …\nTrait denoting <code>NativeType</code>s that can be used as keys of a …\nThe Arrow’s equivalent to an immutable …\nThe Arrow’s equivalent to an immutable …\nA type definition <code>PrimitiveArray</code> for <code>f16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f16</code>\nA type definition <code>PrimitiveArray</code> for <code>f32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f32</code>\nA type definition <code>PrimitiveArray</code> for <code>f64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f64</code>\nTrait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …\nA type definition <code>PrimitiveArray</code> for <code>i128</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i128</code>\nA type definition <code>PrimitiveArray</code> for <code>i16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i16</code>\nA type definition <code>PrimitiveArray</code> for <code>i256</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i256</code>\nA type definition <code>PrimitiveArray</code> for <code>i32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i32</code>\nA type definition <code>PrimitiveArray</code> for <code>i64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i64</code>\nA type definition <code>PrimitiveArray</code> for <code>i8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i8</code>\nThe corresponding <code>IntegerType</code> of this key\nAn <code>Array</code> semantically equivalent to …\nIterator of values of a <code>ListArray</code>.\nAn array representing a (key, value), both of arbitrary …\nA type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>\nA trait describing a mutable array; i.e. an array whose …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …\nA <code>MutableArray</code> that builds a <code>BinaryArray</code>. It differs from …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …\nA mutable, strong-typed version of <code>DictionaryArray</code>.\nThe Arrow’s equivalent to a mutable …\nThe mutable version of <code>FixedSizeListArray</code>.\nThe mutable version of <code>ListArray</code>.\nA distinct type to disambiguate clashing methods\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …\nConverting a <code>MutableStructArray</code> into a <code>StructArray</code> is <code>O(1)</code>.\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nThe concrete <code>Array</code> of <code>DataType::Null</code>.\nA <code>PrimitiveArray</code> is Arrow’s semantically equivalent of …\nA trait describing the ability of a struct to receive new …\nA <code>StructArray</code> is a nested <code>Array</code> with an optional validity …\nA trait describing the ability of a struct to create …\nA trait describing the ability of a struct to extend from …\nA trait describing the ability of a struct to receive new …\nA type definition <code>PrimitiveArray</code> for <code>u16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u16</code>\nA type definition <code>PrimitiveArray</code> for <code>u32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u32</code>\nA type definition <code>PrimitiveArray</code> for <code>u64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u64</code>\nA type definition <code>PrimitiveArray</code> for <code>u8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u8</code>\n<code>UnionArray</code> represents an array whose each slot can contain …\nA <code>Utf8Array</code> is arrow’s semantic equivalent of an …\nIterator of values of an <code>Utf8Array</code>.\nIf the key type always can be converted to <code>usize</code>.\nConverts itself to a reference of <code>Any</code>, which enables …\nConvert to <code>Any</code>, to enable dynamic casting.\nConverts itself to a mutable reference of <code>Any</code>, which …\nConvert itself to an (immutable) atomically reference …\nConvert itself to an (immutable) <code>Array</code>.\nConvert to mutable <code>Any</code>, to enable dynamic casting.\nRepresents this key as a <code>usize</code>.\nClones a dynamic <code>Array</code>.\nThe <code>DataType</code> of the <code>Array</code>. In combination with …\nThe <code>DataType</code> of the array.\nLogically compares two <code>Array</code>s. Two arrays are logically …\nConvert an <code>arrow_data::ArrayData</code> to arrow2 <code>Array</code>\nCreate this <code>Array</code> from [<code>ArrayData</code>]\nReturns a function that writes the element of <code>array</code> at …\nReturns a function that writes the value of the element of …\nContains the trait <code>Growable</code> and corresponding concreate …\nwhether the array is empty\nWhether the array is empty.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is valid.\nWhether <code>index</code> is valid / set.\nThe length of the <code>Array</code>. Every array has a length …\nThe length of the array.\nCreates a new <code>Array</code> with a <code>Array::len</code> of 0.\nCreates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …\nThe number of null slots on this <code>Array</code>.\nThe offsets of the array\nContains functions and function factories to order values …\nAdds a new null element to the array.\nPush a new element that holds the invariants of the struct.\nReserves additional slots to its capacity.\nShrink the array to fit its length.\nSlices this <code>Array</code>.\nSlices the <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nConvert an arrow2 <code>Array</code> to <code>arrow_data::ArrayData</code>\nConvert this <code>Array</code> into [<code>ArrayData</code>]\nFallible version of <code>Extend::extend</code>.\nTries to extend itself with elements from <code>other</code>, failing …\nTries to push a new element.\nThe validity of the <code>Array</code>: every array has an optional …\nThe optional validity of the array.\nThe values of the array\nClones this <code>Array</code> with a new new assigned bitmap.\nDescribes a struct that can be extended from slices of …\nConcrete <code>Growable</code> for the <code>BinaryArray</code>.\nConcrete <code>Growable</code> for the <code>BooleanArray</code>.\nConcrete <code>Growable</code> for the <code>DictionaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeListArray</code>.\nConcrete <code>Growable</code> for the <code>ListArray</code>.\nConcrete <code>Growable</code> for the <code>MapArray</code>.\nConcrete <code>Growable</code> for the <code>NullArray</code>.\nConcrete <code>Growable</code> for the <code>PrimitiveArray</code>.\nConcrete <code>Growable</code> for the <code>StructArray</code>.\nConcrete <code>Growable</code> for the <code>UnionArray</code>.\nConcrete <code>Growable</code> for the <code>Utf8Array</code>.\nConverts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …\nConverts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …\nExtends this <code>Growable</code> with elements from the bounded <code>Array</code> …\nExtends this <code>Growable</code> with null elements, disregarding the …\nThe current length of the <code>Growable</code>.\nCreates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.\nCompare the values at two arbitrary indices in two arrays.\nreturns a comparison function that compares values at two …\nTotal order of all native types whose Rust implementation …\nimplements comparison using IEEE 754 total ordering for f32\nimplements comparison using IEEE 754 total ordering for f64\nAn immutable container semantically equivalent to …\nThis crates’ equivalent of <code>std::vec::IntoIter</code> for <code>Bitmap</code>.\nA container of booleans. <code>MutableBitmap</code> is semantically …\nCompute bitwise AND operation\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise binary operation to a <code>MutableBitmap</code>.\nCreates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.\nCreates a Vec from an <code>Iterator</code> of <code>BitChunk</code>.\nCompute bitwise OR operation\nApply a bitwise operation <code>op</code> to four inputs and return the …\nApply a bitwise operation <code>op</code> to three inputs and return …\nApply a bitwise operation <code>op</code> to one input and return the …\nApplies a function to every bit of this <code>MutableBitmap</code> in …\nGeneral utilities for bitmaps representing items where LSB …\nCompute bitwise XOR operation\nA chunk of bits. This is used to create masks of a given …\nTrait representing an exact iterator over bytes in <code>BitChunk</code>…\nThis struct is used to efficiently iterate over bit masks …\nAn iterator over a slice of bytes in <code>BitChunk</code>s.\nAn iterator over mutable slices of bytes of exact size.\nAn iterator over bits according to the LSB, i.e. the bytes …\nThere are null values\nThere are no null values\nIterator over a bitmap that returns slices of set regions …\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the number of bytes required to hold <code>bits</code> bits.\nReturns the number of zero bits in the slice offsetted by …\nFormats <code>bytes</code> taking into account an offset and length of …\nconvert itself from bytes.\nReturns whether bit at position <code>i</code> in <code>data</code> is set\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns whether bit at position <code>i</code> in <code>byte</code> is set or not\nThe remainder of the iterator.\nAn iterator over individual items of the remainder\nThe number of items in the remainder\nSets bit at position <code>i</code> in <code>byte</code>\nSets bit at position <code>i</code> in <code>data</code>\nSets bit at position <code>i</code> in <code>data</code> without doing bound checks\nconvert itself into bytes.\n<code>Buffer</code> is a contiguous memory region that can be shared …\nBytes representation.\nA vector of trait objects of <code>Array</code> where every item has …\nDefines kernels suitable to perform operations to …\nDefines generics suitable to perform operations to …\nContains the concatenate kernel\nContains operators to filter arrays such as <code>filter</code>.\nDefines take kernel for <code>Array</code>\nApplies a binary operations to two primitive arrays. This …\nVersion of binary that creates a mutable bitmap that is …\nVersion of binary that returns an array and bitmap. Used …\nVersion of binary that checks for errors in the closure …\nVersion of unary that checks for errors in the closure …\nApplies an unary and infallible function to a …\nVersion of unary that creates a mutable bitmap that is …\nVersion of unary that returns an array and bitmap. Used …\nApplies a binary function to two <code>PrimitiveArray</code>s, …\nApplies an unary function to a <code>PrimitiveArray</code>, optionally …\nConcatenate multiple Array of the same type into a single …\nFunction that can filter arbitrary arrays\nReturns a prepared function optimized to filter multiple …\nFilters an Array, returning elements matching the filter …\nReturns a new Chunk with arrays containing only values …\nChecks if an array of type <code>datatype</code> can perform take …\nReturns a new <code>Array</code> with only indices at <code>indices</code>. Null …\nAn extension trait to polyfill <code>Arc::unwrap_or_clone</code> from …\nOpaque binary data of variable length.\nOpaque binary data of variable length whose offsets are …\nA boolean represented as a single bit.\n<code>true</code> and <code>false</code>.\nThe set of supported logical types in this crate.\nAn <code>i32</code> representing the elapsed time since UNIX epoch …\nAn <code>i64</code> representing the elapsed time since UNIX epoch …\nThe number of elapsed days and milliseconds, stored as 2 …\nTwo i32 representing days and ms\nDecimal value with precision and scale precision is the …\nDecimal backed by 256 bits\nDense union\nA dictionary encoded array by <code>IntegerType</code>.\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time. This elapsed time is a physical …\nExtension type.\nRepresents Arrow’s metadata of a “column”.\nOpaque binary data of fixed size.\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some data type with fixed length.\nA list of some logical data type with a fixed number of …\nA 16-bit floating point number.\nAn 16-bit float\nA 32-bit floating point number.\nA <code>f32</code>\nA 64-bit floating point number.\nA <code>f64</code>\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 16-bit integer.\nAn <code>i16</code>\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 32-bit integer.\nAn <code>i32</code>\nA signed 64-bit integer.\nA signed 64-bit integer.\nAn <code>i64</code>\nA signed 8-bit integer.\nA signed 8-bit integer.\nAn <code>i8</code>\nthe set of valid indices types of a dictionary-encoded …\nA “calendar” interval modeling elapsed time that takes …\nInterval units defined in Arrow\nOpaque binary data of variable length and 64-bit offsets.\nOpaque binary data of variable length whose offsets are …\nA list of some data type with variable length and 64-bit …\nA list of some logical data type whose offsets are …\nA variable-length string in Unicode with UFT-8 encoding …\nA variable-length UTF-8 encoded string whose offsets are …\nA list of some data type with variable length.\nA list of some logical data type whose offsets are …\nA nested type.\nA nested type that is represented as\ntypedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …\nTime in microseconds.\nTime in milliseconds.\nmonths_days_ns(i32, i32, i64)\nThe number of elapsed months (i32), days (i32) and …\nTime in nanoseconds.\nA Null with no allocation.\nNull type\nThe set of physical types: unique in-memory …\nAn array where each slot has a known compile-time size.\nThe set of all implementations of the sealed trait …\nAn ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.\ntypedef for <code>Arc&lt;Schema&gt;</code>.\nTime in seconds.\nSparse union\nA nested type that contains an arbitrary number of fields.\nA nested <code>DataType</code> with a given number of <code>Field</code>s.\nA 32-bit time representing the elapsed time since midnight …\nA 64-bit time representing the elapsed time since midnight …\nThe time units defined in Arrow.\nA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …\nAn unsigned 16-bit integer.\nAn unsigned 16-bit integer.\nAn <code>u16</code>\nAn unsigned 32-bit integer.\nAn unsigned 32-bit integer.\nAn <code>u32</code>\nAn unsigned 64-bit integer.\nAn unsigned 64-bit integer.\nAn <code>u64</code>\nAn unsigned 8-bit integer.\nAn unsigned 8-bit integer.\nAn <code>u8</code>\nA nested type that represents slots of differing types.\nA nested datatype that can represent slots of differing …\nMode of <code>DataType::Union</code>\nA variable-length string in Unicode with UTF-8 encoding.\nA variable-length UTF-8 encoded string whose offsets are …\nThe number of elapsed whole months.\nIts logical <code>DataType</code>\nThe fields composing this schema.\nsupport get extension for metadata\nIts nullability\nAdditional custom (opaque) metadata.\nOptional metadata.\nIts name\nIf we have the only reference to <code>T</code> then unwrap it. …\nContains the error value\nEnum with all errors in this crate.\nWrapper for an error triggered by a dependency\nError during import or export to/from a format\nWhen an invalid argument is passed to a function.\nWrapper for IO errors\nReturned when functionality is not yet available.\nContains the success value\nWhenever incoming data from the C data interface, IPC or …\nWhenever pushing to a container fails because it does not …\nTypedef for a <code>std::result::Result</code> of an <code>Error</code>.\nABI-compatible struct for <code>ArrowArray</code>\nABI-compatible struct for <code>ArrowArrayStream</code>.\nImplements an iterator of <code>Array</code> consumed from the C stream …\nABI-compatible struct for <code>ArrowSchema</code>\nExports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.\nExports a <code>Field</code> to the C data interface.\nExports an iterator to the C stream interface\nImports an <code>Array</code> from the C data interface.\nImports a <code>Field</code> from the C data interface.\nFunctionality to mmap in-memory data regions.\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nAPIs to read from and write to Arrow’s IPC format.\nAPIs to represent <code>Chunk</code> as a formatted table.\nStruct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …\nStruct containing fields and whether the file is written …\nA struct adapter of Read+Seek+Write to append to IPC files\ndictionary id\noptional children\nThe fields in the schema\nEndianness of the file\nAPIs to read Arrow’s IPC format.\nAPIs to write to Arrow’s IPC format.\nhow dictionaries are tracked in this crate\nThe record contains a number of buffers that does not …\nMetadata of an Arrow IPC file, written in the footer of …\nAn iterator of <code>Chunk</code>s from an Arrow IPC file.\nA bitmap’s size is smaller than the required for the …\nA buffer’s size is smaller than the required for the …\nA buffer’s size is larger than the file size\nFixedSizeBinaryArray has invalid datatype.\nThe block is an invalid flatbuffer\nThe message’s body length is an invalid flatbuffer\nThe message’s buffers is an invalid flatbuffer\nThe compression is an invalid flatbuffer\nThe message’s data is an invalid flatbuffer\nThe footer’s dictionaries is an invalid flatbuffer\nThe footer is an invalid flatbuffer\nThe message’s header is an invalid flatbuffer\nThe dictionary id is an invalid flatbuffer\nThe dictionary is_delta is an invalid flatbuffer\nThe dictionary message is an invalid flatbuffer\nThe message’s nodes is an invalid flatbuffer\nThe footer’s record batches is an invalid flatbuffer\nThe footer’s schema is an invalid flatbuffer\nThe version is an invalid flatbuffer\nThe IPC file does not end with [b’A’, b’R’, b’R…\nThe IPC file does not start with [b’A’, b’R’, b’R…\nInvalid dictionary id\nField id is not a dictionary\nThe message does not contain data\nThe file’s schema does not contain fields\nRecordBatch messages do not contain buffers\nThe message does not contain a header\nRecordBatch messages does not contain nodes\nThe file’s footer does not contain record batches\nThe file’s footer does not contain a schema\nThe first 4 bytes of the last 10 bytes is &lt; 0\nThe different types of errors that reading from IPC can …\nNext item in the stream\nMetadata of an Arrow IPC stream, written at the start of …\nArrow Stream reader.\nEncodes the stream’s status after each read.\ndictionaries can only contain dictionary messages; record …\nRelative positions in the file is &lt; 0\nA live stream without data\nThe blocks in the file\nDeserialize an flatbuffers-encoded Schema message into …\nThe files’ <code>IpcSchema</code>\nThe IPC fields tracking dictionaries\nReads the record batch at position <code>index</code> from the reader.\nReads all file’s dictionaries, if any This function is …\nRead the Arrow IPC file’s metadata\nReads the metadata of the stream\nThe schema that is read from the file footer\nThe schema that is read from the stream’s first message\nThe total size of the file in bytes\nThe IPC version of the stream\nThe size of the IPC buffer\nnumber of bytes of all buffers in the record\nthe size of the file\nDeclared number of elements in the buffer\nDeclared length of the bitmap\nNumber of bits on the IPC buffer\nThe requested dictionary id\nThe requested dictionary id\nBytes required for the <code>length</code> and <code>type</code>\nThe name of the <code>NativeType</code>\nCompression codec\nArrow file writer\nLZ4 (framed)\nAn array <code>Chunk</code> with optional accompanying IPC fields.\nArrow stream writer\nOptions declaring the behaviour of writing to IPC\nZSTD\nWhether the buffers should be compressed and which codec …\nAssigns every dictionary field a unique ID\nConverts a Schema and IpcFields to a flatbuffers-encoded …\nWrites an <code>Array</code> to <code>arrow_data</code>\nReturns a visual representation of <code>Chunk</code>\nMemory maps dictionaries from an IPC file into\nMemory maps an record batch from an IPC file into a <code>Chunk</code>.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nA wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …\nA wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:\nThe <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).\nThe <code>Scalar</code> implementation of a boolean.\nThe <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.\nThe <code>Scalar</code> implementation of fixed size binary ([…\nThe scalar equivalent of <code>FixedSizeListArray</code>. Like …\nThe scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …\nThe scalar equivalent of <code>MapArray</code>. Like <code>MapArray</code>, this …\nThe representation of a single entry of a …\nThe implementation of <code>Scalar</code> for primitive, semantically …\nTrait object declaring an optional value with a <code>DataType</code>. …\nA single entry of a <code>crate::array::StructArray</code>.\nA single entry of a <code>crate::array::UnionArray</code>.\nThe implementation of <code>Scalar</code> for utf8, semantically …\nconvert itself to\nthe logical type.\nwhether it is valid\ncreates a new <code>Scalar</code> from an <code>Array</code>.\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of seconds in a day\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nParses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nCalculates the scale factor between two TimeUnits. The …\nParses a <code>Utf8Array</code> to naive timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nAn iterator of known, fixed size. A trait denoting Rusts’…\nA chunk of bits. This is used to create masks of a given …\nAn [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …\nAn [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code> returning the …\nType denoting its representation as bytes. This is <code>[u8; N]</code> …\nTwo i32 representing days and ms\nA 16-bit floating point number.\nA 32-bit floating point number.\nA 64-bit floating point number.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…\nRange of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 64-bit integer.\nA signed 8-bit integer.\nmonths_days_ns(i32, i32, i64)\nSealed trait implemented by all physical types that can be …\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nThe corresponding variant of <code>PrimitiveType</code>.\nThe set of all implementations of the sealed trait …\nAn unsigned 16-bit integer.\nAn unsigned 32-bit integer.\nAn unsigned 64-bit integer.\nAn unsigned 8-bit integer.\nThe in-memory representation of the DayMillisecond variant …\nType representation of the Float16 physical type\nConvert itself from <code>usize</code>.\nFrom bytes in big endian\nFrom bytes in little endian\nconvert itself from bytes.\nConvert itself from <code>usize</code>.\nPhysical representation of a decimal\nThe in-memory representation of the MonthDayNano variant …\nAn iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.\nContains traits and implementations of multi-data used in …\nTo bytes in big endian\nTo bytes in little endian\nconvert itself into bytes.\nConvert itself to <code>usize</code>.\nThe type holding bits for masks.\nDescribes the ability to convert itself from a <code>BitChunk</code>.\nNumber of lanes\nType used for masking.\nThe <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …\nA struct that lends itself well to be compiled leveraging …\nTrait implemented by some <code>NativeType</code> that have a SIMD …\nThe SIMD type associated with this trait. This type …\nReturns a tuple of 3 items whose middle item is itself, …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nConvert itself from a slice.\nConvert itself from a slice.\ncreates a new Self from <code>v</code> by populating items from <code>v</code> up to …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nSets values to <code>default</code> based on <code>mask</code>.\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nAn archetype is a high-level construct that represents a …\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nApproximations of stack and heap size for both internal …\nThe unique name of a space view type.\nViews are the panels shown in the viewer’s viewport and …\nReturns the names of all components that must, should and …\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReadable name for displaying in ui.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nReturns the total size of <code>self</code> on the heap, in bytes.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nIs <code>Self</code> just plain old data?\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this loggable, e.g. …\nThe fully-qualified name of this batch, e.g. …\nReturns the names of all components that <em>may</em> be provided …\nReturns the names of all components that <em>should</em> be …\nRun-time reflection for reading meta-data about components …\nReturns the names of all components that <em>must</em> be provided …\nReturns the total size of <code>self</code> on the stack, in bytes.\nUseful macro for staticlly asserting that a <code>struct</code> …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nReturns the total size of <code>self</code> in bytes, accounting for …\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Component</strong>: Configures how a clear operation should behave …\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nReturn early with an error.\nWrap the error value with additional context.\nConstruct an ad-hoc error from a string or existing non-…\nWrap the error value with additional context that is …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nIs this a required component?\nPlaceholder value, used whenever no fallback was provided …\nAll variants, in the order they appear in the enum.\n128-bit hash. Negligible risk for collision.\n64-bit hash.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom an existing u64. Use this only for data conversions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA set of substitutions for entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nIf true, ALSO include children and grandchildren of this …\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nInstall this as the global allocator to get memory usage …\nPer-callstack statistics.\nNumber of allocation and their total size.\nTracks memory use over time.\nRepresents a limit in how much RAM to use for the entire …\nHow much RAM is the application using?\nHelper to warn if we are using too much RAM.\nFormatted backtrace.\nTrack allocations and memory use.\nAdd an allocation.\nAdd data to history\nRead the current memory of the running application.\nNumber of allocations.\nBytes used by the application according to our own memory …\nBytes used by the application according to our own memory …\nBytes used by the blueprint store according to its own …\nVRAM bytes used by the application according to its own …\nBytes used by the primary caches according to their own …\nBytes used by the datastore according to its own …\nLive allocations at this callstack.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAll live largish allocations, fully tracked.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimit in bytes.\nAll live allocations used for internal book-keeping.\nFor when we print this statistic.\nBytes allocated by the application according to operating …\nBytes allocated by the application according to operating …\nNumber of bytes.\nIf this was stochastically sampled - at what rate?\nAll live allocations sampled of medium size, …\nRemove an allocation.\nThe most popular callstacks.\nAmount of available RAM on this machine.\nAllocations smaller than these are left untracked.\nAll live allocations that we are NOT tracking (because …\nWarns if we have exceeded the limit.\nBytes used by the application according to our best …\nUtitility functions\nInstall this as the global allocator to get memory usage …\nAll live largish allocations, fully tracked.\nTotal number of live allocations, and the number of live …\nAre we doing (slightly expensive) tracking of the …\nAll live allocations used for internal book-keeping.\nShould we do (slightly expensive) tracking of the …\nAll live allocations sampled of medium size, …\nThe most popular callstacks.\nAllocations smaller than these are left untracked.\nGather statistics from the live tracking, if enabled.\nTurn on callstack tracking (slightly expensive) if a given …\nAll live allocations that we are NOT tracking (because …\nReturns monotonically increasing time in seconds.\nUniquely identifies cached query results in the <code>Caches</code>.\nStats for a single <code>crate::RangeCache</code>.\nStats for all primary caches.\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nContains the error value\nResults for a latest-at query.\nContains the success value\nResults for a range query.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nResults for each individual component.\nResults for each individual component.\nThe compound index of this query result.\nThe associated <code>EntityPath</code>.\nThe query that yielded these results.\nThe query that yielded these results.\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nWhat is the actual size of this cache after deduplication?\nHow many chunks in the cache?\nWhat would be the size of this cache in the worst case, …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nThis format is used for space-efficient color …\nDefault value for clearing depth buffer to infinity.\nLabel for resources. Optimized out in release builds.\nDepth offset used to resolve z-fighting between 2D …\nThe <code>FileResolver</code> handles both resolving import clauses and …\nA file server capable of watching filesystem events in the …\nA very limited filesystem, just enough for our internal …\nIdentifier used to identify a buffer upon retrieval of the …\nsRGB gray gradient = perceptually even\nHue, saturation, value, alpha. All in the range [0, 1]. No …\nNo-op rect transform that transforms from a unit rectangle …\nA pre-parsed import clause, as in <code>#import &lt;something&gt;</code>.\nBuilder for a vector of line strips, making it easy to …\nColor format used for the main target of the view builder.\nDefault depth state for enabled depth write &amp; read.\nDefault multisample state that any <code>wgpu::RenderPipeline</code> …\nDepth format used for the main target of the view builder.\nEnable MSAA always. This makes our pipeline less variable …\nRadius of length 1 in ui points.\nWhat outline (if any) should be drawn.\nThe depth format used for the picking layer - f32 makes it …\nThe texture format used for the picking layer.\nCombination of <code>PickingLayerObjectId</code> and …\nThe second 64bit of the picking layer.\nThe first 64bit of the picking layer.\nManages the rendering of the picking layer pass, its …\nBuilder for point clouds, making it easy to create …\nType erased draw data that can be submitted directly to …\nThe recommended <code>FileResolver</code> type for the current …\nA 2D rectangle with float coordinates.\nA 2D rectangle with integer coordinates.\nDefines a transformation from a rectangular region of …\nAny resource involving wgpu rendering which can be re-used …\n0-1 linear space <code>RGBA</code> color with premultiplied alpha.\nRGBA color in sRGB gamma space, with separate/unmultiplied …\nThe texture format used for screenshots.\nThe texture format used for screenshots.\nSpecifies where to look for imports when both absolute and …\nA size of something in either scene units or ui points.\nUtility for dealing with buffers containing raw 2D texture …\nThe unit rectangle, defined as (0, 0) - (1, 1).\nThe highest level rendering block in <code>re_renderer</code>. Used to …\nZero radius.\nalpha 0-1. A negative value signifies an additive color …\nReturns the global frame index of the active frame.\nA human-readable summary about an adapter\nAdd several 3D points\nAdds several 2D points (assumes Z=0). Uses an …\nStart of a new batch.\nStart of a new batch.\nCall this at the end of a frame but before submitting …\nCall this at the beginning of a new frame.\nSize required for a padded buffer as it is read/written …\nSize required for an unpadded buffer.\nHow many bytes per row are required to be allocated in …\nHow many bytes per row contain actual data.\nCoalesces all filesystem events since the last call to …\nPremultiplied RGBA color for the first outline layer.\nPremultiplied RGBA color for the second outline layer.\nReturns a gamma-space sRGB in 0-255 range. This is a …\nReturns sRGB polynomial approximation from Inferno color …\nReturns sRGB polynomial approximation from Magma color …\nReturns sRGB polynomial approximation from Plasma color …\nReturns sRGB polynomial approximation from Turbo color …\nReturns sRGB polynomial approximation from Viridis color …\nComposites the final result of a <code>ViewBuilder</code> to a given …\nSets the depth offset for the entire batch.\nReturns the device’s capabilities.\nDraws the frame as instructed to a temporary HDR target.\nThe size of the rectangle.\nThe size of the rectangle. Supposed to be positive.\nAdds (!) flags to the line strip.\nAdds (!) flags for this batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the global <code>FileServer</code>.\nReturns the recommended filesystem handle for the current …\nReturns a mutable reference to the global <code>FileServer</code>.\nReturns an sRGB gray value, assuming <code>t</code> is normalized.\nhue 0-1\nA macro to read the contents of a file on disk, and …\nCreate a shader module using the <code>include_file!</code> macro and …\nInsert a path into search path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinalizes the builder and returns a line draw data with …\nFinalizes the builder and returns a point cloud draw data …\nReturns an iterator over the directories in the search …\nThe corner with the smallest coordinates.\nThe corner with the smallest coordinates.\nNew picking layer for a given screen.\nRetrieves 2D texture buffer info for a given format &amp; …\nReturns the recommended <code>FileResolver</code> for the current …\nCreates a new size in scene units.\nCreates a new size in ui point units.\nReturns the oldest received picking results for a given …\nReturns the oldest received screenshot results for a given …\nSets an individual outline mask ids. Note that this has a …\nSets an outline mask for every element in the batch.\nOutline radius for both layers in pixels. Fractional …\nPad <code>RGB</code> to <code>RGBA</code> with the given alpha.\nSets the picking object id for the current batch.\nPush a path to search path.\nPushes additional outline mask ids for a specific range of …\nBoosts the size of the points by the given amount of …\nBoosts the size of the points by the given amount of …\nThe full scene.\nThe region of the scene that should be visible.\nRemoves the padding from a buffer containing gpu texture …\nRemoves the padding from a buffer containing gpu texture …\nGets a renderer with the specified type, initializing it …\nReturns number of points that can be added without …\nReturns number of strips that can be added without …\nReturns number of vertices that can be added without …\nResolution in pixels as configured on view builder …\nResource managers are concerned with mapping (typically) …\nsaturation 0-1\nGet the scene-size of this, if stored as a scene size.\nSchedules the readback of a rectangle from the picking …\nSchedules the taking of a screenshot.\nComputes a transformation matrix that applies the rect …\nGet the point size of this, if stored as a point size.\nStops watching for file events at the given <code>path</code>.\nvalue 0-1\nStarts watching for file events at the given <code>path</code>.\nUses current outline and falls back to <code>other</code> if current is …\nSets the <code>world_from_obj</code> matrix for the <em>entire</em> batch.\nCapabilities of a given device.\nDevice tiers <code>re_renderer</code> distinguishes.\nFull support of WebGPU spec without additional feature …\nLimited feature support as provided by WebGL and native …\nStartup configuration for a <code>crate::RenderContext</code>\nType of Wgpu backend.\nBackend implemented via wgpu-core.\nWgpu backend type.\nChecks if passed downlevel capabilities support the given …\nHardware capabilities of the device.\nDevice descriptor compatible with the given device tier.\nRequired features for the given device tier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPicks the highest possible tier for a given adapter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWgpu limits required by the given device tier.\nMaximum buffer size in bytes.\nMaximum texture dimension in pixels in both width and …\nThe color format used by the eframe output buffer.\nGenerous parsing of a graphics backend string.\nDownlevel features required by the given tier.\nWhether the current device tier supports sampling from …\nWhether the current device tier supports sampling from …\nBackends that are officially supported by <code>re_renderer</code>.\nValidates that the given backend is applicable for the …\nOne chunk of encoded video data; usually one frame.\nConfiguration of a video.\nOne decoded video frame.\nPixel format/layout used by <code>Frame::data</code>.\nA single sample in a video.\nA value in time units.\nThe number of time units per second.\nNot used in <code>re_video</code> itself, but useful for media type …\nDecoded video data.\nErrors that can occur when loading a video.\nPer color component bit depth.\nLength of sample starting at <code>Sample::byte_offset</code>.\nOffset into <code>VideoData::data</code>\nNatural height of the video.\nNatural width of the video.\nTime at which this sample appears in the frame stream, in …\nThis array stores all data used by samples.\nVideo frame decoding.\nTime at which this sample appears in the decoded …\nVideo demultiplexing.\nCodec-specific configuration.\nConvert to a duration\nLength of the video.\nDuration of the video, in time units.\nDuration of the sample, in time units.\nWhich features was this crate compiled with?\nDetermines the presentation timestamps of all frames …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>None</code> if the sample is invalid/out-of-range.\nWe split video into GOPs, each beginning with a key frame, …\nNatural height of the video.\nThe codec used to encode the video.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns None if the mp4 doesn’t specify whether the …\nThe start of a new <code>crate::demux::GroupOfPictures</code>?\nIs t his the start of a new <code>GroupOfPictures</code>?\nLoads a video from the given data.\nAll the tracks in the mp4; not just the video track.\nCreate a new value in <em>time units</em>.\nThe number of samples in the video.\nSamples contain the byte offsets into <code>data</code> for each frame.\nContains info about the codec, bit depth, etc.\nReturns the subsampling mode of the video.\nHow many time units are there per second.\nNatural width of the video.\nRuns a <code>SyncDecoder</code> in a background thread, for …\nOne chunk of encoded video data; usually one frame.\nContains the error value\nOne decoded video frame.\nInterpret YUV as GBR.\nContains the success value\nPixel format/layout used by <code>Frame::data</code>.\nBlocking decoder of video chunks.\nYuv matrix coefficients used by <code>PixelFormat::Yuv</code>.\nPixel layout used by <code>PixelFormat::Yuv</code>.\nYuv value range used by <code>PixelFormat::Yuv</code>.\nAV1 support.\nBlocks until all pending frames have been decoded.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe start of a new <code>crate::demux::GroupOfPictures</code>?\nResets the decoder.\nClear and reset everything\nSubmit some work and read the results.\nRuns a <code>SyncDecoder</code> in a background thread, for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClear and reset everything\nConfiguration of a video.\nA Group of Pictures (GOP) always starts with an I-frame, …\nA single sample in a video.\nNot used in <code>re_video</code> itself, but useful for media type …\nDecoded video data.\nErrors that can occur when loading a video.\nSubsampling in both X and Y.\nSubsampling in X only.\nNo subsampling.\nLength of sample starting at <code>Sample::byte_offset</code>.\nOffset into <code>VideoData::data</code>\nNatural height of the video.\nNatural width of the video.\nTime at which this sample appears in the frame stream, in …\nThis array stores all data used by samples.\nTime at which this sample appears in the decoded …\nCodec-specific configuration.\nDuration of the video, in time units.\nDuration of the sample, in time units.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWe split video into GOPs, each beginning with a key frame, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs t his the start of a new <code>GroupOfPictures</code>?\nAll the tracks in the mp4; not just the video track.\nThe GOP’s <code>sample_range</code> mapped to <code>usize</code> for slicing.\nRange of samples contained in this GOP.\nSamples contain the byte offsets into <code>data</code> for each frame.\nDecode timestamp of the first sample in this GOP, in time …\nContains info about the codec, bit depth, etc.\nHow many time units are there per second.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoads both gltf and glb into the mesh &amp; texture manager.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad a Wavefront .obj file into the mesh &amp; texture manager.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad a STL .stl file into the mesh manager.\nBase color texture, also known as albedo. (not optional, …\nFactor applied to the decoded albedo color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex range within the owning <code>Mesh</code> that should be rendered …\nIndex range within the owning <code>Mesh</code> that should be rendered …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvery mesh has at least one material.\nDefines how mesh vertices are built.\nNon-empty array of vertex triangle indices.\nBuffer for all vertex data, subdivided in several sections …\nPer-vertex albedo color. Must be equal in length to …\nMust be equal in length to <code>Self::vertex_positions</code>. Use …\nNon-empty array of vertex positions.\nMust be equal in length to <code>Self::vertex_positions</code>.\nNext vertex attribute index that can be used for another …\nVertex buffer layouts describing how vertex data should be …\nDo BGR(A)-&gt;RGB(A) conversion is in the shader.\nHow to map the normalized <code>.r</code> component to a color.\nDescribes a texture and how to map it to a color.\nDebug overlay for quick &amp; dirty display of texture …\nGPU sided data used by a <code>Renderer</code> to draw things to the …\nBy default, line caps end at the last/first position of …\nAdds a round cap at the end of a line strip (excludes …\nPuts a equilateral triangle at the end of the line strip …\nBy default, line caps end at the last/first position of …\nAdds a round cap at the start of a line strip (excludes …\nPuts a equilateral triangle at the start of the line strip …\nEnable color gradient across the line.\nIf true, draw 2D camera facing circles instead of spheres.\nIf true, we shade all points in the batch like spheres.\nForces spanning the line’s quads as-if the camera was …\nApply the given function.\nThe type of generic skybox to render.\nData that is valid for a batch of line strips.\nA line drawing operation. Encompasses several lines, each …\nProperty flags for a line strip\nColormapping is off. Take the .r color and splat onto rgb.\nColormapping is off. Keep rgb as is.\nProperty flags for a point batch\nData that is valid for a batch of point cloud points.\nA point cloud drawing operation. Expected to be recreated …\nA Renderer encapsulate the knowledge of how to render a …\nDescribes how the color information is encoded in the …\nLook up the color in this texture.\nTexture filter setting for magnification (a texel covers …\nTexture filter setting for minification (several texels …\nDefines an outline mask for an individual vertex ranges …\nDefines an outline mask for an individual vertex ranges.\nPer-instance (as opposed to per-material/mesh!) tint color …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nFor any one-component texture, you need to supply a color …\nConfigures color mapping mode.\nTexture that fills the rectangle\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nDecode 0-1 sRGB gamma values to linear space before …\nThe intrinsics of the camera used for the projection.\nThe dimensions of the depth texture in pixels.\nDepth offset applied after projection.\nDepth offset applied after projection.\nThe actual data from the depth texture.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCalled once per phase given by …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nVector that spans up the rectangle from its top left …\nVector that spans up the rectangle from its top left …\nAdditional properties of this point cloud batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nAssumes a separate/unmultiplied alpha.\nRaise the normalized values to this power (before any …\nGpu mesh used by this instance\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nNumber of vertices covered by this batch.\nOptional cpu representation of the mesh, not needed for …\nThe minimum and maximum depth value in world-space, for …\nTint that is multiplied to the rect, supports …\nMultiply color channels with the alpha channel before …\nCreates a new instance of a mesh with all fields set to …\nTransforms and uploads line strip data to be consumed by …\nTransforms and uploads point cloud data to be consumed by …\nTransforms and uploads mesh instance data to be consumed …\nCreates a new instance of a mesh with gpu and optional cpu …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOptional outline mask.\nOption outline mask id preference.\nOptional outline mask setting for this instance.\nOptional outline mask setting for the entire batch.\nOptional outline mask setting for the entire batch.\nCombination of flags indicating in which phases …\nPicking layer id.\nPicking object id that applies for the entire batch.\nPicking object id that applies for the entire batch.\nPicking object id that applies for the entire depth cloud.\nNumber of points covered by this batch.\nPoint radius is calculated as world-space depth times this …\nMin/max range of the values in the texture.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGets or creates a vertex shader module for drawing a …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nFor textures that need decoding in the shader, for example …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTop left corner position in world space.\nLength factor as multiple of a line’s radius applied to …\nWidth factor as multiple of a line’s radius applied to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMultiplier to get world-space depth from whatever is in …\nWhere this instance is placed in world space and how its …\nTransformation applies to line positions\nTransformation applies to point positions\nThe extrinsics of the camera used for the projection, with …\nWorld-space bounding-box.\nNumber of sentinel vertices, one at the start and one at …\nPosition and radius.\nSentinel vertex used at the start and the end of the line …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRadius of the point in world space\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nSomething went wrong in a user-callback.\nUse full range YUV with all components ranging from 0 to …\nHandle to a 2D resource.\nIdentity matrix, interpret YUV as GBR.\nDescribes image data for the purpose of creating a 2D …\nError that can occur when converting image data to a …\nSomething went wrong when creating the GPU texture &amp; …\nUse limited range YUV, i.e. for 8bit data, Y is valid in […\nImage data format that can be converted to a wgpu texture.\nTexture manager for 2D textures.\nThe source format is already in a wgpu compatible format.\n4:0:0, single plane of chroma only. Also known as I400\nYUV 4:2:2 subsampling, single plane.\n4:2:0 subsampling with a separate Y plane, followed by a …\n4:2:0 subsampling with 3 separate planes. Also known as …\n4:2:2 subsampling with 3 separate planes. Also known as …\n4:4:4 no chroma downsampling with 3 separate planes. Also …\nYUV (== <code>YCbCr</code>) formats, typically using chroma …\nYuv matrix coefficients that determine how a YUV image is …\nSupported chroma subsampling input formats.\nExpected range of YUV values.\nCreates a new 2D texture resource and schedules data …\nCreates a texture that can hold the image data.\nData for the highest mipmap level.\nWhat format the input data texture is expected to be in.\nGiven the dimensions of the output picture, what are the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new 2D texture resource and schedules data …\nCreates a new 2D texture resource and schedules data …\nCreates a new 2D texture resource and schedules data …\nHeight of the texture.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this desc is not used for a texture update, this label …\nReturns <code>None</code> if the <code>texture</code> is not 2D.\nSize of the buffer needed to create the data texture, i.e. …\nThe texture format required in order to store this image …\nThe texture usages required in order to store this image …\nTakes raw image data and transfers &amp; converts it to a GPU …\nReturns a single pixel white pixel with an rgba8unorm …\nReturns a single pixel white pixel with an rgba8unorm …\nWidth of the texture.\nWidth and height of the texture.\nThe size of the resulting output texture / the semantic …\nReturns a single zero pixel with format …\nReturns a single zero pixel with format …\nReturns a single zero pixel with format …\nUtility for dealing with buffers containing raw 2D texture …\nSize required for a padded buffer as it is read/written …\nSize required for an unpadded buffer.\nHow many bytes per row are required to be allocated in …\nHow many bytes per row contain actual data.\nMay use hardware acceleration if available and compatible …\ne.g. bad mp4, or bug in mp4 parse\ne.g. unsupported codec\ne.g. unsupported codec\nHow the video should be decoded.\ne.g. unsupported codec\nError that can occur during frame decoding.\nContains the error value\nContains the success value\nShould use a hardware decoder.\nShould use a software decoder even if hardware …\nVideo data + decoder(s).\nIdentifier for an independent video decoding stream.\nInformation about the status of a frame decoding.\nThe video data\nReturns a texture with the latest frame at the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNatural height of the video.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, the texture is outdated. Keep polling for a fresh …\nLoads a video from the given data.\nRemoves all decoders that have been unused in the last …\nIf true, this texture is so out-dated that it should have …\nThe texture to show.\nWhat part of the video this video frame covers.\nNatural width of the video.\nPuts the view space origin into the middle of the screen.\nOrthographic projection with the camera position at the …\nConfigures the camera placement in the orthographic …\nPerspective camera looking along the negative z view space …\nHow we project from 3D to 2D.\n<code>ViewBuilder</code> that can be shared between threads.\nBasic configuration for a target view.\nPuts the view space origin at the top-left corner of the …\nThe highest level rendering block in <code>re_renderer</code>. Used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many pixels are there per point.\nThe viewport resolution in physical pixels.\nDefines a viewport transformation from the projected space …\nAspect ratio of the perspective transformation.\nDistance of the far plane to the camera.\nDistance of the near plane.\nViewing angle in view space y direction (which is the …\nSize of the orthographic camera view space y direction …\nSend <code>LogMsg</code>es to a server over TCP.\nServer connection error.\nComes after version.\nAdded <code>PROTOCOL_HEADER</code>. Introduced for Rerun 0.16.\nThe default amount of time to wait for the TCP connection …\nThe default address of a Rerun TCP server which an SDK …\nWait until everything has been sent.\nSwitch to a mode where we drop messages if disconnected.\nStall until all messages so far has been sent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the latency in the <code>LogMsg</code> channel is greater than this, …\nConnect via TCP to this log server.\nTurns <code>info</code>-level logs into <code>debug</code>-level logs.\nListen to multiple SDK:s connecting to us over TCP.\nAn archetype is a high-level construct that represents a …\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nRotation defined with an axis and an angle.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nRotation defined by a quaternion.\nA 3D rotation.\nApproximations of stack and heap size for both internal …\nThe unique name of a space view type.\nViews are the panels shown in the viewer’s viewport and …\nReturns the names of all components that must, should and …\nArchetype are the high-level things you can log, like <code>Image</code>…\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nThe blueprint-specific components.\nComponents are the basic building blocks of <code>archetypes</code>.\nThe low-level datatypes that <code>components</code> are built from.\nImplements <code>crate::Component</code> for any given type that is a …\nReadable name for displaying in ui.\nRe-exports of external crates that are used throughout the …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nReturns the total size of <code>self</code> on the heap, in bytes.\nImage-related utilities.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nIs <code>Self</code> just plain old data?\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this loggable, e.g. …\nThe fully-qualified name of this batch, e.g. …\nReturns the names of all components that <em>may</em> be provided …\nReturns the names of all components that <em>should</em> be …\nReturns the names of all components that <em>must</em> be provided …\nReturns the total size of <code>self</code> on the stack, in bytes.\nUseful macro for staticlly asserting that a <code>struct</code> …\nInternal helpers; not part of the public API.\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nReturns the total size of <code>self</code> in bytes, accounting for …\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: Spatially disconnect this entity from its …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the ellipsoids.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nList of class descriptions, mapping class indices to class …\nThe tensor data\nThe expected range of depth values.\nWhether the entity path at which this is logged is …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nThe format of the image.\nThe format of the image.\nThe format of the image.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the ellipsoids.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar value to log.\nScaling factor.\nScaling factors.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThe directions of the [x, y, z] axes.\nThe blueprint-specific archetypes.\nThe blueprint-specific components.\nThe blueprint-specific datatypes.\nThe blueprint-specific views.\n<strong>Archetype</strong>: Configuration for the background of a view.\n<strong>Archetype</strong>: The query for the dataframe view.\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Configuration for the legend of a plot.\n<strong>Archetype</strong>: Configuration for the scalar axis of a plot.\n<strong>Archetype</strong>: The description of a single view.\n<strong>Archetype</strong>: The contents of a <code>SpaceView</code>.\n<strong>Archetype</strong>: Configures how tensor scalars are mapped to …\n<strong>Archetype</strong>: Specifies a 2D slice of a tensor.\n<strong>Archetype</strong>: Configures how a selected tensor slice is shown …\n<strong>Archetype</strong>: Configures what range of each timeline is shown …\n<strong>Archetype</strong>: Controls the visual bounds of a 2D view.\nShould empty cells be filled with latest-at queries?\nThe class of the view.\nColor used for the <code>SolidColor</code> background type.\nHow scalar values map to colors.\nTo what corner the legend is aligned.\nThe name of the view.\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGamma exponent applied to normalized values before mapping …\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of the background.\nFilter used when zooming in on the tensor.\nCreate a new <code>Background</code>.\nCreate a new <code>DataframeQuery</code>.\nCreate a new <code>PlotLegend</code>.\nCreate a new <code>ScalarAxis</code>.\nCreate a new <code>SpaceViewBlueprint</code>.\nCreate a new <code>SpaceViewContents</code>.\nCreate a new <code>TensorScalarMapping</code>.\nCreate a new <code>TensorSliceSelection</code>.\nCreate a new <code>TensorViewFit</code>.\nCreate a new <code>VisibleTimeRanges</code>.\nCreate a new <code>VisualBounds2D</code>.\nThe <code>QueryExpression</code> that populates the contents for the …\nThe range of the axis.\nControls the visible range of a 2D view.\nRetrieves the time range for a given timeline.\nThe time ranges to show for each timeline unless specified …\nHow the image is scaled to fit the view.\nSelected columns. If unset, all columns are selected.\nSets the time range for a given timeline.\nAny dimension listed here will have a slider for the index.\nThe “anchor point” of this space view.\nThe timeline for this query.\nWhether the legend is shown at all.\nWhether this space view is visible.\nWhich dimension to map to width.\nShould empty cells be filled with latest-at queries?\nColor used for the <code>SolidColor</code> background type.\nHow scalar values map to colors.\nTo what corner the legend is aligned.\nThe name of the view.\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nGamma exponent applied to normalized values before mapping …\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nFilter used when zooming in on the tensor.\nThe range of the axis.\nHow the image is scaled to fit the view.\nSelected columns. If unset, all columns are selected.\nAny dimension listed here will have a slider for the index.\nThe “anchor point” of this space view.\nThe timeline for this query.\nWhether the legend is shown at all.\nWhether this space view is visible.\nWhich dimension to map to width.\nIf enabled, the Y axis range will remain locked to the …\nIf enabled, the Y axis range will remain locked to the …\n<strong>Component</strong>: The active tab in a tabbed container.\n<strong>Component</strong>: Whether empty cells in a dataframe should be …\n<strong>Component</strong>: The type of the background in a view.\nVisible, but as small as possible on its shorter axis.\n<strong>Component</strong>: The layout share of a column in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\n<strong>Component</strong>: One of four 2D corners, typically used to align …\nFully expanded.\nScale the image for the largest possible fit in the view’…\nScale the image for the largest possible fit in the view’…\n<strong>Component</strong>: Configuration for a filter-by-range feature of …\n<strong>Component</strong>: Configuration for the filter is not null …\nA bright gradient.\nA dark gradient.\nCompletely hidden.\n<strong>Component</strong>: All the contents in the container.\n<strong>Component</strong>: Whether the entity can be interacted with.\nLeft bottom corner.\nLeft top corner.\n<strong>Component</strong>: Indicate whether the range should be locked …\nNo scaling, pixel size will match the image’s …\n<strong>Component</strong>: Tri-state for panel controls.\n<strong>Component</strong>: An individual query expression used to filter a …\nRight bottom corner.\nRight top corner.\n<strong>Component</strong>: The layout share of a row in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\nSimple uniform color.\n<strong>Component</strong>: The class identifier of view, e.g. <code>&quot;2D&quot;</code>, …\n<strong>Component</strong>: The origin of a <code>SpaceView</code>.\n<strong>Component</strong>: Show a slider for the index of some dimension …\n<strong>Component</strong>: A timeline identified by its name.\n<strong>Component</strong>: Determines whether an image or texture should …\n<strong>Component</strong>: Hash of a viewer recommendation.\n<strong>Component</strong>: Whether the container, view, entity or instance …\n<strong>Component</strong>: The range of values on a given timeline that …\n<strong>Component</strong>: Visual bounds in 2D space used for <code>Spatial2DView</code>…\n<strong>Datatype</strong>: Describe a component column to be selected in …\n<strong>Datatype</strong>: Configuration for the filter-by-range feature of …\n<strong>Datatype</strong>: Configuration for the filter is not null feature …\n<strong>Datatype</strong>: List of selected columns in a dataframe.\n<strong>Datatype</strong>: Defines a slider for the index of some dimension.\nWhether the filter by event feature is active.\nThe column used when the filter by event feature is used.\nThe name of the component.\nThe component columns to include\nThe dimension number.\nEnd of the time range (inclusive).\nThe entity path for this component.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Self</code> from an <code>EntityPath</code> and a …\nBeginning of the time range.\nThe time columns to include\n<strong>View</strong>: A bar chart view.\n<strong>View</strong>: A view to display any data in a tabular form.\n<strong>View</strong>: For viewing spatial 2D data.\n<strong>View</strong>: For viewing spatial 3D data.\n<strong>View</strong>: A view on a tensor of any dimensionality.\n<strong>View</strong>: A view of a single text document, for use with …\n<strong>View</strong>: A view of a text log, for use with …\n<strong>View</strong>: A time series view for scalars over time, for use …\nConfigures the vertical axis of the plot.\nConfiguration for the background of the view.\nConfiguration for the background of the view.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigures the legend of the plot.\nConfigures the legend of the plot.\nQuery of the dataframe.\nConfigures how scalars are mapped to color.\nHow to select the slice of the tensor to show.\nConfigures which range on each timeline is shown by this …\nConfigures which range on each timeline is shown by this …\nConfigures which range on each timeline is shown by this …\nConfigures how the selected slice should fit into the view.\nThe visible parts of the scene, in the coordinate space of …\n<strong>Component</strong>: Policy for aggregation of multiple scalar plot …\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Component</strong>: The annotation context provides additional …\n<code>*</code>\nAverage all points in the range together.\n<strong>Component</strong>: The length of an axis in local units of the …\n<strong>Component</strong>: A binary blob of data.\nThe transform describes how to transform into the child …\n<code>⏺</code>\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: Configures how a clear operation should behave …\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Component</strong>: Colormap for mapping scalar values within a …\n<code>x</code>\nRasmusgo’s Cyan to Yellow colormap\nMany lines are drawn to represent the surface of the shape …\n<strong>Component</strong>: The world-&gt;depth map scaling factor.\n<code>◆</code>\n<strong>Component</strong>: Spatially disconnect this entity from its …\n<code>▼</code>\n<strong>Component</strong>: Draw order of 2D elements. Higher values are …\n<strong>Component</strong>: A path to an entity, usually to reference some …\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Component</strong>: How much a primitive fills out the available …\n<strong>Component</strong>: A gamma correction value to be used with a …\nA simple black to white gradient.\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\n<strong>Component</strong>: A buffer that is known to store image data.\n<strong>Component</strong>: The metadata describing the contents of a …\n<strong>Component</strong>: The distance from the camera origin to the …\nThe Inferno colormap from Matplotlib.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<code>◀</code>\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\nLinearly interpolate the nearest neighbors, creating a …\nThe Magma colormap from Matplotlib.\n<strong>Component</strong>: Filter used when magnifying an image/texture …\nLines are drawn around the parts of the shape which …\n<strong>Component</strong>: The visual appearance of a point in e.g. a 2D …\n<strong>Component</strong>: Radius of a marker of a point in e.g. a 2D …\nKeep only the maximum values in the range.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\nKeep only the minimum values in the range.\nKeep both the minimum and maximum values in the range.\nFind both the minimum and maximum values in the range, …\n<strong>Component</strong>: A display name, typically for an entity or a …\nShow the nearest pixel value.\nNo aggregation.\n<strong>Component</strong>: Degree of transparency ranging from 0.0 (fully …\nThe transform describes how to transform into the parent …\n<strong>Component</strong>: Camera projection, from image coordinates to …\nThe Plasma colormap from Matplotlib.\n<code>+</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion that …\n<strong>Component</strong>: A 3D scale factor that doesn’t propagate in …\n<strong>Component</strong>: A 3x3 transformation matrix Matrix that doesn’…\n<strong>Component</strong>: A translation vector in 3D space that doesn’t …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\n<strong>Component</strong>: The radius of something, e.g. a point.\n<strong>Component</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Component</strong>: Pixel resolution width &amp; height, e.g. of a …\n<code>▶</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion.\n<strong>Component</strong>: A scalar value, encoded as a 64-bit floating …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Component</strong>: Whether the entity’s <code>components::Text</code> label …\nThe surface of the shape is filled in with a solid color. …\n<code>◼️</code>\n<strong>Component</strong>: The width of a stroke specified in UI points.\n<strong>Component</strong>: An N-dimensional array of numbers.\n<strong>Component</strong>: Specifies a concrete index on a tensor …\n<strong>Component</strong>: Specifies which dimension to use for height.\n<strong>Component</strong>: Specifies which dimension to use for width.\n<strong>Component</strong>: A 2D texture UV coordinate.\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Component</strong>: The severity level of a text log message.\n<strong>Component</strong>: A 3x3 transformation matrix Matrix.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: A translation vector in 3D space.\n<strong>Component</strong>: The three indices of a triangle in a triangle …\nGoogle’s Turbo colormap map.\n<code>▲</code>\n<strong>Component</strong>: Range of expected or valid values, specifying a …\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\n<strong>Component</strong>: Timestamp inside a <code>archetypes::AssetVideo</code>.\n<strong>Component</strong>: How we interpret the coordinate system of an …\nThe Viridis colormap from Matplotlib\nBoundary is an absolute value.\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: Annotation info annotating a class id or …\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Datatype</strong>: A binary blob of data.\n<strong>Datatype</strong>: A single boolean.\n<strong>Datatype</strong>: The innermost datatype of an image.\n<strong>Datatype</strong>: The description of a semantic Class.\n<strong>Datatype</strong>: A helper type for mapping <code>datatypes::ClassId</code>s to …\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: Specified what color components are present in …\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n64bit IEEE-754 floating point, also known as <code>double</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\n16-bit signed integer.\n16bit signed integer.\n32-bit signed integer.\n32bit signed integer.\n64-bit signed integer.\n64bit signed integer.\n8-bit signed integer.\n8bit signed integer.\n<strong>Datatype</strong>: The metadata describing the contents of a …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nGrayscale luminance intencity/brightness/value, sometimes …\n<strong>Datatype</strong>: A 3x3 Matrix.\n<strong>Datatype</strong>: A 4x4 Matrix.\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\n<strong>Datatype</strong>: Specifieds a particular format of an …\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nRed, Green, Blue\nRed, Green, Blue, Alpha\n<strong>Datatype</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Datatype</strong>: An Axis-Aligned Bounding Box in 2D space, …\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: A single dimension within a multi-dimensional …\n<strong>Datatype</strong>: Indexing a specific tensor dimension.\n<strong>Datatype</strong>: Selection of a single tensor dimension.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n16-bit unsigned integer.\n16bit unsigned integer.\n32-bit unsigned integer.\n32bit unsigned integer.\n64-bit unsigned integer.\n64bit unsigned integer.\n8-bit unsigned integer.\n8bit unsigned integer.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A uint32 vector in 2D space.\n<strong>Datatype</strong>: A uint32 vector in 3D space.\n<strong>Datatype</strong>: A uint vector in 4D space.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: A 16-byte UUID.\n<strong>Datatype</strong>: A vector in 2D space.\n<strong>Datatype</strong>: A vector in 3D space.\n<strong>Datatype</strong>: A vector in 4D space.\n<strong>Datatype</strong>: Presentation timestamp within a …\n<strong>Datatype</strong>: How we interpret the coordinate system of an …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka <code>YUYV</code>, <code>YUYV16</code> or <code>NV21</code>), is a YUV 4:2:2 chroma …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nHow much to rotate around the axis.\nAxis to rotate around.\nThe content/data.\nThe raw bytes representing the UUID.\nThe data type of each channel (e.g. the red channel) of …\nThe value: class name, color, etc.\nThe key: the <code>components::ClassId</code>.\nThe color that will be applied to the annotated entity.\nL, RGB, RGBA, …\nThe dimension number to select.\nThe dimension number to select.\nHigh time boundary for sequence timeline.\nThe height of the image in pixels.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nThe index along the dimension to use.\nThe <code>datatypes::AnnotationInfo</code> for the class.\nInvert the direction of the dimension.\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nThe label that will be shown in the UI.\nThe name of this dimension, e.g. “width”, “height”…\nUsed mainly for chroma downsampled formats and differing …\nAngle in radians. One turn is equal to 2π (or τ) radians.\nTime range to use for this timeline.\nThe shape of the tensor, including optional names for each …\nThe length of this dimension.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nThe width of the image in pixels.\nThe range of the X-axis (usually left and right bounds).\nThe range of the Y-axis (usually top and bottom bounds).\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nEuler rotation sequences.\nA trait for extending <code>f32</code> and <code>f64</code> with extra methods.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nIntrinsic three-axis rotation XYZ\nIntrinsic three-axis rotation XZY\nIntrinsic three-axis rotation YXZ\nIntrinsic three-axis rotation YZX\nIntrinsic three-axis rotation ZXY\nIntrinsic three-axis rotation ZYX\n<code>bool</code> vector mask types. \nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>f32</code> vector, quaternion and matrix types. \n<code>f64</code> vector, quaternion and matrix types. \n<code>i16</code> vector types. \nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>i32</code> vector types. \n<code>i64</code> vector types. \nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nReturns <code>v</code> normalized to the range <code>[a, b]</code>.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nRemap <code>self</code> from the input range to the output range.\nTraits adding swizzle methods to all vector types. \n<code>u16</code> vector types. \nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>u32</code> vector types. \n<code>u64</code> vector types. \nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nPixel is 8-bit alpha\nAnimationDecoder trait\nAn Image in AVIF format.\nPixel contains 8-bit B, G and R channels\nPixel is 8-bit BGR with an alpha channel\nAn Image in BMP Format\nThe number of channels of this pixel type.\nA string that can help to interpret the meaning each …\nThis pixel has the format of one of the predefined …\nPixel is 8-bit CMYK\nAn enumeration over supported color types and bit depths\nThe maximum value for this type of primitive within the …\nThe minimum value for this type of primitive within the …\nAn Image in DDS Format")
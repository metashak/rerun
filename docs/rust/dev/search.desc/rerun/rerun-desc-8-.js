searchState.loadedDescShard("rerun", 8, "An error was encountered while decoding.\nThe delay of a frame relative to the previous one.\nA Dynamic Image\nTypes which are safe to treat as an immutable byte slice …\nAn error was encountered while encoding.\nContains the error value\nAn enumeration of color types encountered in image formats.\nAn Image in farbfeld Format\nA flat buffer over a (multi channel) image.\nA single animation frame\nAn implementation dependent iterator, reading the frames …\nA trait for manipulating images.\nTrait to inspect an image.\nAn Image in GIF Format\nSendable grayscale + alpha channel image buffer\nSendable grayscale image buffer\nAn Image in Radiance HDR Format\nAn Image in ICO Format\nGeneric image buffer\nThe trait that all decoders implement\nSpecialized image decoding not be supported by all formats\nThe trait all encoders implement\nThe generic error type for image operations.\nAn enumeration of supported image formats. Not all formats …\nEach pixel in this image is 16-bit Luma\nEach pixel in this image is 8-bit Luma\nEach pixel in this image is 16-bit Luma with alpha\nEach pixel in this image is 8-bit Luma with alpha\nResult of an image decoding/encoding process\nEach pixel in this image is 16-bit Rgb\nEach pixel in this image is 32-bit float Rgb\nEach pixel in this image is 8-bit Rgb\nEach pixel in this image is 16-bit Rgb with alpha\nEach pixel in this image is 32-bit float Rgb with alpha\nEach pixel in this image is 8-bit Rgb with alpha\nAn error occurred while interacting with the environment.\nAn Image in JPEG Format\nPixel is 1-bit luminance\nPixel is 16-bit luminance\nPixel is 16-bit luminance\nPixel is 2-bit luminance\nPixel is 4-bit luminance\nPixel is 8-bit luminance\nPixel is 8-bit luminance\nPixel is 1-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 2-bit luminance with an alpha channel\nPixel is 4-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nCompleting the operation would have required more …\nGrayscale colors.\nGrayscale colors + alpha channel\nContains the success value\nAn Image in OpenEXR Format\nAn error was encountered in input arguments.\nA generalized pixel.\nThe type of pixel.\nThe pixel with an associated <code>ColorType</code>. Not all possible …\nImmutable pixel iterator\nAn Image in PNG Format\nAn Image in general PNM Format\nThe type of each channel in a pixel. For example, this can …\nAn Image in QOI format.\nRGB colors.\nPixel contains 1-bit R, G and B channels\nPixel is 16-bit RGB\nPixel contains 16-bit R, G and B channels\nPixel contains 2-bit R, G and B channels\nPixel is 32-bit float RGB\nPixel is 32-bit float RGB\nAn image buffer for 32-bit float RGB pixels, where the …\nPixel contains 4-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nSendable Rgb image buffer\nRGB colors + alpha channel\nPixel is 1-bit RGB with an alpha channel\nPixel is 16-bit RGBA\nPixel is 16-bit RGB with an alpha channel\nPixel is 2-bit RGB with an alpha channel\nPixel is 32-bit float RGBA\nPixel is 32-bit float RGBA\nAn image buffer for 32-bit float RGBA pixels, where the …\nPixel is 4-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nSendable Rgb + alpha channel image buffer\nA View into another image\nThe scalar type that is used to store each channel in this …\nAn Image in TGA Format\nAn Image in TIFF Format\nPixel is of unknown color type with the specified bits per …\nAn operation can not be completed by the chosen …\nAn Image in WEBP Format\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nGet the bytes of this value.\nBlend the color of a given pixel into ourself, taking into …\nPut a pixel at location (x, y), taking into account alpha …\nIterators and other auxiliary structure for the <code>ImageBuffer</code>…\nReturns the components as a slice.\nReturns the channels of this pixel as a 4 tuple. If the …\nReturns the components as a mutable slice\nEncoding and decoding for various image file formats.\nSupplementary color information.\nReturns the color type of the image data produced by this …\nCopies all of the pixels from another image into this …\nCopies all of the pixels from one part of this image to …\nReturns a tuple containing the width and height of the …\nThe width and height of this image.\nContains detailed error representation.\nImage representations for ffi.\nConstruct a pixel from the 4 channels a, b, c and d. If …\nReturns a view into a slice.\nReturns mutable view into a mutable slice.\nReturns the pixel located at (x, y). Indexed from top left.\nGets a reference to the mutable pixel at location <code>(x, y)</code>. …\nGuess image format from memory block\nThe height of this image.\nReturns the ICC color profile embedded in the image, or …\nRead a tuple containing the (width, height) of the image …\nImage Processing Functions\nReturns true if this x, y coordinate is contained inside …\nConsume the decoder producing a series of frames.\nInvert this pixel\nInput and output of images.\nA <code>repr(C)</code> description of the layout of buffer samples.\nCreate a new image from a Reader.\nCreate a new image from a byte slice\nCreate a new image from a byte slice\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nMathematical helper functions and types.\nOpen the image located at the path specified. The image’…\nReturns the color type of the image file before decoding\nReturns an Iterator over the pixels of this image. The …\nPut a pixel at location (x, y). Indexed from top left.\nReturns all the bytes in the image.\nUse <code>read_image</code> instead; this method is an implementation …\nDecode a rectangular section of the image.\nUnderlying linear container holding sample values.\nSaves the supplied buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified …\nSet the decoder to have the specified limits. See <code>Limits</code> …\nReturns a mutable subimage that is a view into this image. …\nConvert this pixel to luma\nConvert this pixel to luma with an alpha channel\nConvert this pixel to RGB\nConvert this pixel to RGB with an alpha channel\nReturns the total number of bytes in the decoded image.\nReturns the pixel located at (x, y). Indexed from top left.\nPuts a pixel at location (x, y). Indexed from top left.\nReturns a subimage that is an immutable view into this …\nThe width of this image.\nWrites the supplied buffer to a writer in the specified …\nWrites all the bytes in an image to the encoder.\nProvides color conversions for whole image buffers.\nEnumerate the pixels of an image.\nEnumerate the pixels of an image.\nEnumerate the rows of an image.\nEnumerate the rows of an image.\nIterate over pixel refs.\nIterate over mutable pixel refs.\nIterate over rows of an image\nIterate over mutable rows of an image\nConverts <code>self</code> to a buffer of type T\nDecoding and Encoding of JPEG Images\nDecoding and Encoding of PNG Images\nPixels per centimeter\nPixels per inch (2.54 cm)\nJPEG decoder\nThe representation of a JPEG encoder\nRepresents the absence of a unit, the values indicate only …\nRepresents the pixel density of an image\nRepresents a unit in which the density of an image is …\nA couple of values for (Xdensity, Ydensity)\nThe unit in which the density is measured\nUses a heuristic to select one of the preceding filters …\nAn <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.\nFilters based on the average of left and right neighbor …\nHigh compression level\nCompression level of a PNG encoder. The default setting is …\nDefault compression level\nFast, minimal compression\nFilter algorithms used to process image data to improve …\nNo processing done, best used for low bit depth grayscale …\nAlgorithm that takes into account the left, upper left, …\nPNG decoder\nPNG encoder\nFilters based on previous pixel in the same scanline\nFilters based on the scanline above\nThe required color type can not be handled.\nAn error was encountered while decoding.\nAn error was encountered while decoding an image.\nThe resulting image exceed dimension limits in either …\nThe dimensions passed are wrong.\nAn error was encountered while encoding.\nAn error was encountered while encoding an image.\nContains the error value\nThe format is known exactly.\nRepeated an operation for which error that could not be …\nAn image format is not supported.\nA string describing the parameter. This is discouraged and …\nSome feature specified by string. This is discouraged and …\nThe generic error type for image operations.\nA best effort representation for image formats.\nResult of an image decoding/encoding process\nThe operation would have performed an allocation larger …\nAn error occurred while interacting with the environment.\nCompleting the operation would have required more …\nIndicates the limit that prevented an operation from …\nCompleting the operation would have required more …\nThe format can be identified by a name.\nThe end of the image has been reached.\nContains the success value\nAn error was encountered in input arguments.\nAn error was encountered in inputs arguments.\nDetails how a parameter is malformed.\nA common path extension for the format is known.\nThe format is not known or could not be determined.\nAn operation can not be completed by the chosen …\nThe specified strict limits are not supported for this …\nThe implementation for an operation was not provided.\nDetails what feature is not supported.\nThe given limits\nThe supported strict limits\nThe color format did not match the channel count.\nThe samples are in column-major form and all samples are …\nDenotes invalid flat sample buffers when trying to convert …\nA flat buffer over a (multi channel) image.\nAll samples are packed.\nDifferent normal forms of buffers.\nThe represented image can not use this representation.\nAt least pixels are packed.\nThe samples are in row-major form and all samples are …\nA ffi compatible description of a sample buffer.\nThe represented image was too large.\nNo pixel aliases another.\nA flat buffer that can be used as an image view.\nA mutable owning version of a flat buffer.\nDeprecated - ChannelCountMismatch is used instead\nAdd this to an index to get to the sample in the next …\nThe number of channels in the color representation of the …\nSupplementary color information.\nThe height of the represented image.\nAdd this to an index to get to the next sample in …\nA <code>repr(C)</code> description of the layout of buffer samples.\nUnderlying linear container holding sample values.\nThe width of the represented image.\nAdd this to an index to get to the next sample in …\nA bi-level color map\nCubic Filter\nThe color type on which the map operates on\nA color map\nAvailable Sampling Filters.\nGaussian Filter\nLanczos with window 3\nNearest Neighbor\nLinear Filter\nPerforms a Gaussian blur on the supplied image. <code>sigma</code> is a …\nBrighten the supplied image. <code>value</code> is the amount to …\nFunctions for altering and converting the color of …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nReturn a mutable view into an image The coordinates set …\nReturn an immutable view into an image The coordinates set …\nReduces the colors of the image using the supplied …\nPerform a 3x3 box filter on the supplied image. <code>kernel</code> is …\nFlip an image horizontally\nFlip an image horizontally and put the result into the …\nFlip an image horizontally in place.\nFlip an image vertically\nFlip an image vertically and put the result into the …\nFlip an image vertically in place.\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of ColorMap overrides the …\nFill the image with a linear horizontal gradient\nHue rotate the supplied image. <code>value</code> is the degrees to …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nLinearly sample from an image using coordinates in [0, w-1]…\nSample from an image using coordinates in [0, w-1] and [0, …\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nOverlay an image at a given coordinate (x, y)\nCalculate the region that can be copied from top to bottom.\nReplace the contents of an image at a given coordinate (x, …\nResize the supplied image to the specified dimensions. …\nRotate an image 180 degrees clockwise.\nRotate an image 180 degrees clockwise and put the result …\nRotate an image 180 degrees clockwise in place.\nRotate an image 270 degrees clockwise.\nRotate an image 270 degrees clockwise and put the result …\nRotate an image 90 degrees clockwise.\nRotate an image 90 degrees clockwise and put the result …\nLinearly sample from an image using coordinates in [0, 1].\nSample from an image using coordinates in [0, 1], taking …\nResize the supplied image to the specific dimensions.\nTile an image by repeating it multiple times\nPerforms an unsharpen mask on the supplied image. <code>sigma</code> is …\nFill the image with a linear vertical gradient\nA bi-level color map\nThe color type on which the map operates on\nA color map\nBrighten the supplied image. <code>value</code> is the amount to …\nBrighten the supplied image in place. <code>value</code> is the amount …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nAdjust the contrast of the supplied image in place. …\nReduces the colors of the image using the supplied …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of ColorMap overrides the …\nHue rotate the supplied image. <code>value</code> is the degrees to …\nHue rotate the supplied image in place. <code>value</code> is the …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nSet of supported strict limits for a decoder.\nResource limits for decoding.\nA multi-format image reader.\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nA Rectangle defined by its top left corner, width and …\nThe rectangle’s height.\nThe rectangle’s width.\nThe x coordinate of the top left corner.\nThe y coordinate of the top left corner.\nAn array where the data has shared ownership and is copy …\none-dimensional shared ownership array\ntwo-dimensional shared ownership array\nAn array that owns its data uniquely.\nzero-dimensional array\none-dimensional array\ntwo-dimensional array\nthree-dimensional array\nfour-dimensional array\nfive-dimensional array\nsix-dimensional array\nAn <em>n</em>-dimensional array.\ndynamic-dimensional array\nA read-only array view.\nzero-dimensional array view\none-dimensional array view\ntwo-dimensional array view\nthree-dimensional array view\nfour-dimensional array view\nfive-dimensional array view\nsix-dimensional array view\ndynamic-dimensional array view\nA read-write array view.\nzero-dimensional read-write array view\none-dimensional read-write array view\ntwo-dimensional read-write array view\nthree-dimensional read-write array view\nfour-dimensional read-write array view\nfive-dimensional read-write array view\nsix-dimensional read-write array view\ndynamic-dimensional read-write array view\nArgument conversion into an array view\nA producer element that can be assigned to once\nAn axis index.\nDescription of the axis, its length and its stride.\nColumn major or “F” order\nContinue folding with this value\nAn array with copy-on-write behavior.\nCowArray’s representation.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nDimension description.\nCreate a new dimension value.\nDimension type of the producer\nDimension type\nAdds the two dimensions at compile time.\nArray shape and index trait.\nFold is complete and will return this value\nThe array element type.\nError code for an error related to array shape or layout.\nValue controlling the execution of <code>.fold_while</code> on <code>Zip</code>.\nincompatible memory layout\nincompatible shape\nA single index.\nExtra indexing methods for array views\nArgument conversion a dimension.\nArgument conversion into a producer.\nThe element produced per iteration.\nThe element produced per iteration.\nArray index type\nCreate a zero-dimensional index\nzero-dimensionial\nCreate a one-dimensional index\none-dimensional\nCreate a two-dimensional index\ntwo-dimensional\nCreate a three-dimensional index\nthree-dimensional\nCreate a four-dimensional index\nfour-dimensional\nCreate a five-dimensional index\nfive-dimensional\nCreate a six-dimensional index\nsix-dimensional\nCreate a dynamic-dimensional index\ndynamic-dimensional\nDynamic dimension or index type.\nArray index type (signed)\nNext larger dimension\nElements that support linear algebra operations.\nAn iterator of a sequence of evenly spaced floats.\nAn iterator of a sequence of logarithmically spaced number.\nA transparent wrapper of <code>Cell&lt;T&gt;</code> which is identical in …\nCorresponding owned data with MaybeUninit elements\nSlicing information describing multiple mutable, disjoint …\nFor fixed-size dimension representations (e.g. <code>Ix2</code>), this …\nFloating-point element types <code>f32</code> and <code>f64</code>.\nTuple or fixed size arrays that can be used to index an …\nA producer of an n-dimensional set of elements; for …\nToken to represent a new axis in a slice description.\nA new axis of length 1.\nArray order\nDimensionality of the output array.\nout of bounds indexing\nThe resulting array storage of the same kind but …\nThe type of the slices created by <code>.multi_slice_move()</code>.\nThe resulting dimension type after broadcasting.\nThe sum of the two dimensions.\nThe type of the reference to the element that is produced, …\noverflow when computing offset, length, etc.\nOwned data.\nArcArray’s representation.\nArray’s representation.\nPattern matching friendly form of the dimension value.\nthe shape does not fit inside type limits\nA read-only array view without a lifetime.\nA mutable array view without a lifetime.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray pointer’s representation.\nArray shape with a next smaller dimension.\nRow major or “C” order\nElements that can be used as direct operands in arithmetic …\nA contiguous array shape of n dimensions.\nArray shape argument with optional order parameter\nA trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …\nAn error related to array shape or layout.\nA slice (range with step size).\nA range with step size. <code>end</code> is an exclusive index. …\nA type that can slice an array of dimension <code>D</code>.\nRepresents all of the necessary information to perform a …\nA slice (range with step), an index, or a new axis token.\nNext smaller dimension (if applicable)\nAn array shape of n dimensions in c-order, f-order or …\naliasing array elements\nBorrowed data.\nArray view’s representation.\nLock step function application across several arrays or …\nCreate a zero-dimensional array with the element <code>x</code>.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nCreate an <strong><code>Array</code></strong> with one, two, three, four, five, or six …\nBorrow as a read-only array view.\nBorrow as a read-write array view.\nAssign the value <code>input</code> to the element that self represents.\nCreate a zero-dimensional array view borrowing <code>x</code>.\nCreate a one-dimensional array view with elements …\nCreate a two-dimensional array view with elements …\nCreate a one-dimensional read-write array view with …\nCreate a two-dimensional read-write array view with …\nAxis identifier (index)\nArray zip macro: lock step function application across …\nConcatenate arrays along the given axis.\nConcatenate arrays along the given axis.\nUnsafely translate the data representation from one element\nend index; negative are counted from the back of the axis; …\nGet a reference of a element through the view.\nReturns the number of axes in the input array.\nGet a reference of a element through the view.\nCreate an iterable of the array shape <code>shape</code>.\nReturn an iterable of the indices of the passed-in array.\nConvert the dimensional into a dynamic dimensional (IxDyn).\nConvert the dimension into a pattern matching friendly …\nConvert the value into an <code>NdProducer</code>.\nProducers, iterables and iterators.\nLength in count of elements of the current axis\nLinear algebra.\nReturn an iterator of evenly spaced floats.\nAn iterator of a sequence of logarithmically spaced …\nSplit the view into multiple disjoint slices.\nReturns the number of dimensions (number of axes).\nReturns the number of axes in the output array.\nndarray prelude.\nReturn an iterator of floats from <code>a</code> to <code>b</code> (exclusive), …\nReturn the shape of the producer.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nSlice argument constructor.\nCompute the size of the dimension (number of elements)\nCompute the size while checking for overflow.\nStack arrays along the new axis.\nStack arrays along the new axis.\nstart index; negative are counted from the back of the axis\nstep size in elements; the default is 1, for every element.\nStride in count of elements of the current axis\nGet a reference of a element through the view without …\nCreates a dimension of all zeros with the specified ndim.\nend index; negative are counted from the back of the axis; …\nstart index; negative are counted from the back of the axis\nstep size in elements; the default is 1, for every element.\nAn iterator over the length and stride of each axis of an …\nAn iterator that traverses over the specified axis and …\nAn iterator that traverses over the specified axis and …\nAn iterator that traverses over an axis and and yields …\nAn iterator that traverses over an axis and and yields …\nWindow producer and iterable\nExact chunks producer and iterable.\nExact chunks iterator.\nExact chunks iterator.\nExact chunks producer and iterable.\nAn iterator over the indexes and elements of an array.\nAn iterator over the indexes and elements of an array …\nIndices producer and iterable.\nAn iterator over the indexes of an array shape.\nBy-value iterator for an array\nAn iterator over the elements of an array.\nAn iterator over the elements of an array (mutable).\nSee <code>.lanes()</code> for more information.\nAn iterator that traverses over all axes but one, and …\nAn iterator that traverses over all dimensions but the …\nSee <code>.lanes_mut()</code> for more information.\nWindow producer and iterable\nMatrix Multiplication\nThe result of the operation.\nGeneral matrix-matrix multiplication.\nGeneral matrix-vector multiplication.\nKronecker product of 2D matrices.\nAn array where the data has shared ownership and is copy …\nAn array that owns its data uniquely.\nzero-dimensional array\none-dimensional array\ntwo-dimensional array\nthree-dimensional array\nfour-dimensional array\nfive-dimensional array\nsix-dimensional array\nAn <em>n</em>-dimensional array.\ndynamic-dimensional array\nA read-only array view.\nzero-dimensional array view\none-dimensional array view\ntwo-dimensional array view\nthree-dimensional array view\nfour-dimensional array view\nfive-dimensional array view\nsix-dimensional array view\ndynamic-dimensional array view\nA read-write array view.\nzero-dimensional read-write array view\none-dimensional read-write array view\ntwo-dimensional read-write array view\nthree-dimensional read-write array view\nfour-dimensional read-write array view\nfive-dimensional read-write array view\nsix-dimensional read-write array view\ndynamic-dimensional read-write array view\nArgument conversion into an array view\nAn axis index.\nAn array with copy-on-write behavior.\nDimension description.\nCreate a new dimension value.\nArray shape and index trait.\nCreate a zero-dimensional index\nzero-dimensionial\nCreate a one-dimensional index\none-dimensional\nCreate a two-dimensional index\ntwo-dimensional\nCreate a three-dimensional index\nthree-dimensional\nCreate a four-dimensional index\nfour-dimensional\nCreate a five-dimensional index\nfive-dimensional\nCreate a six-dimensional index\nsix-dimensional\nCreate a dynamic-dimensional index\ndynamic-dimensional\nNext larger dimension\nFor fixed-size dimension representations (e.g. <code>Ix2</code>), this …\nFloating-point element types <code>f32</code> and <code>f64</code>.\nToken to represent a new axis in a slice description.\nPattern matching friendly form of the dimension value.\nA read-only array view without a lifetime.\nA mutable array view without a lifetime.\nA trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …\nNext smaller dimension (if applicable)\nCreate a zero-dimensional array with the element <code>x</code>.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate an <strong><code>Array</code></strong> with one, two, three, four, five, or six …\nBorrow as a read-only array view.\nBorrow as a read-write array view.\nCreate a zero-dimensional array view borrowing <code>x</code>.\nCreate a one-dimensional array view with elements …\nCreate a two-dimensional array view with elements …\nCreate a one-dimensional read-write array view with …\nArray zip macro: lock step function application across …\nConvert the dimensional into a dynamic dimensional (IxDyn).\nConvert the dimension into a pattern matching friendly …\nReturns the number of dimensions (number of axes).\nSlice argument constructor.\nCompute the size of the dimension (number of elements)\nCompute the size while checking for overflow.\nCreates a dimension of all zeros with the specified ndim.\nA builder for creating a UUID.\nA 128-bit (16 byte) buffer containing the UUID.\nA counter that can be used by version 1 and version 6 …\nVersion 8: Custom.\nVersion 2: DCE Security.\nA general error that can occur when working with UUIDs.\nReserved for future expansion.\nVersion 1: Timestamp and node ID.\nThe “max” (all ones) UUID.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nReserved by the NCS for backward compatibility.\nThe “nil” (all zeros) UUID.\nAn empty counter that will always return the value <code>0</code>.\nThe type of sequence returned by this counter.\nAs described in the RFC4122 Specification (default).\nVersion 4: Random.\nVersion 5: SHA-1 hash.\nVersion 6: Sortable Timestamp and node ID.\nVersion 7: Timestamp and random.\nA timestamp that can be encoded into a UUID.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nAdapters for alternative string formats.\nGet the next value in the sequence to feed into a …\nAdapters for alternative <code>serde</code> formats.\nGenerating UUIDs from timestamps.\nParse <code>Uuid</code>s from string literals at compile time.\nFormat a <code>Uuid</code> as a braced hyphenated string, like …\nFormat a <code>Uuid</code> as a hyphenated string, like …\nFormat a <code>Uuid</code> as a simple string, like …\nFormat a <code>Uuid</code> as a URN string, like …\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nSerialize a <code>Uuid</code> as a <code>[u8; 16]</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nDeserialize a braced Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nDeserialize a <code>[u8; 16]</code> as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>[u8; 16]</code>\nDeserialize a simple Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nDeserialize a urn Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nA counter that can be used by version 1 and version 6 …\nThe type of sequence returned by this counter.\nA timestamp that can be encoded into a UUID.\nThe number of 100 nanosecond ticks between the RFC4122 …\nDefault implementations for the <code>ClockSequence</code> trait.\nGet the next value in the sequence to feed into a …\nAn empty counter that will always return the value <code>0</code>.\nThe tensor did not have the right shape for an image (e.g. …\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nThe <code>ChannelDatatype</code> for this type.\nHappens if you try to cast <code>NV12</code> or <code>YUY2</code> to a depth image …\nA normal grayscale or color image (<code>crate::archetypes::Image</code>…\nA depth map (<code>crate::archetypes::DepthImage</code>).\ne.g. failed to decode a JPEG file.\nTypes that implement this can be used as image channel …\nError returned when trying to interpret a tensor as an …\nErrors when converting images from the <code>image</code> crate to an …\nFailure to convert the loaded image to a …\nThe kind of image data, either color, segmentation, or …\nErrors when loading image files.\ne.g. failed to find a file on disk.\nA segmentation image (<code>crate::archetypes::SegmentationImage</code>…\nCould not convert source to <code>TensorData</code>.\nFailed to read the MIME type from inspecting the image …\nUnknown color type from the image crate.\nThe encountered MIME type is not supported for decoding …\nYuv matrix coefficients that determine how a YUV image is …\nConverts it to what is useful for the image API.\nReturns the indices of an appropriate set of dimensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns sRGB from YUV color.\n16-bit floating point number.\n16-bit floating point number.\n32-bit floating point number.\n32-bit floating point number.\n64-bit floating point number.\n64-bit floating point number.\nSigned 16 bit integer.\nSigned 16 bit integer.\nSigned 32 bit integer.\nSigned 32 bit integer.\nSigned 64 bit integer.\nSigned 64 bit integer.\nSigned 8 bit integer.\nSigned 8 bit integer.\nErrors when trying to cast <code>TensorData</code> to an <code>ndarray</code>\nThe data types supported by a <code>crate::datatypes::TensorData</code>.\nThe data that can be stored in a …\nErrors when loading <code>TensorData</code> from the <code>image</code> crate.\nUnsigned 16 bit integer.\nUnsigned 16 bit integer.\nUnsigned 32 bit integer.\nUnsigned 32 bit integer.\nUnsigned 64 bit integer.\nUnsigned 64 bit integer.\nUnsigned 8 bit integer.\nUnsigned 8 bit integer.\nGet the value as a 64-bit floating point number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this datatype a floating point number?\nIs this datatype an integer?\nWhat is the maximum finite value representable by this …\nWhat is the minimum finite value representable by this …\nNumber of bytes used by the type\nConvert the value to a <code>u16</code>, but only if it can be …\nLarge struct used for benchmarking.\nBuilds len instances of <code>LargeStruct</code>\nThe total number of components in the archetype: 22 …\nThe total number of components in the archetype: 19 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer1</code>.\nCreate a new <code>AffixFuzzer2</code>.\nCreate a new <code>AffixFuzzer3</code>.\nCreate a new <code>AffixFuzzer4</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBaby’s got it.\nFeeling blue.\n<strong>Datatype</strong>: A test of the enum type.\nIt’s the only way to go.\nIt’s what’s remaining.\nOne.\nCorrect.\nThe answer to life, the universe, and everything.\nThree.\nTwo.\nGreat film.\n<strong>Datatype</strong>: A test of an enumate with specified values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe first value.\nThe second value.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nLeft or right handedness. Used to describe a coordinate …\nLeft-handed coordinate system.\nRight-handed coordinate system.\nPositive (<code>+</code>) or Negative (<code>-</code>).\nOne of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …\nThe six cardinal directions for 3D view-space and …\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nReturns the argument unchanged.\nConvert an upper case letter to one of the six cardinal …\nCalls <code>U::from(self)</code>.\nLong description of the direction, e.g. “Up”, “Down…\nRepresent this direction as the first letter of the …\nPositive or negative.\nAn archetype is a high-level construct that represents a …\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nApproximations of stack and heap size for both internal …\nThe unique name of a space view type.\nViews are the panels shown in the viewer’s viewport and …\nReturns the names of all components that must, should and …\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nReturns the <em>unresolved</em> backtrace associated with this …\nReturns the <em>unresolved</em> backtrace associated with this …\nCast POD (plain-old-data) types to another POD type.\nCast POD (plain-old-data) types to <code>u8</code>.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReadable name for displaying in ui.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nPrecomputed hash of the string.\nReturns the total size of <code>self</code> on the heap, in bytes.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs <code>Self</code> just plain old data?\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this loggable, e.g. …\nThe fully-qualified name of this batch, e.g. …\nThe number of instances of T stored in this buffer.\nReturns the names of all components that <em>may</em> be provided …\nReturns the names of all components that <em>should</em> be …\nRun-time reflection for reading meta-data about components …\nReturns the names of all components that <em>must</em> be provided …\nThe number of bytes stored in this buffer\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nReturns the total size of <code>self</code> on the stack, in bytes.\nUseful macro for staticlly asserting that a <code>struct</code> …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nReturns the total size of <code>self</code> in bytes, accounting for …\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Component</strong>: Configures how a clear operation should behave …\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nGet the backtrace for this Error.\nReturn early with an error.\nAn iterator of the chain of source errors contained by …\nWrap the error value with additional context.\nWrap the error value with additional context.\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nConstruct an ad-hoc error from a string or existing non-…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nThe lowest level cause of this error — this error’s …\nWrap the error value with additional context that is …\nA <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nContains the <code>Array</code> and <code>MutableArray</code> trait objects …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\ncontains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.\nContains <code>Buffer</code>, an immutable container for all Arrow …\nContains <code>Chunk</code>, a container of <code>Array</code> where every array has …\ncontains a wide range of compute operations (e.g. […\nContains all metadata, such as <code>PhysicalType</code>, <code>DataType</code>, …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nDefines <code>Error</code>, representing all errors returned by this …\nExecutes the given command directly.\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\ncontains FFI bindings to import and export <code>Array</code> via Arrow…\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nThis crates a hashmap from the provided iterator using …\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nContains modules to interface with other formats such as […\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to [<code>map_either</code>], with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nMemory maps regions defined on the IPC format into <code>Array</code>.\nThis crates a hashmap using RandomState::new which obtains …\nContains the declaration of <code>Offset</code>\nQueues the given command for further execution.\nRemoves a key from the map, returning the value at the key …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\ncontains the <code>Scalar</code> trait object representing individual …\nPerforms a set of actions within a synchronous update.\nConversion methods for dates and times.\nDeclares <code>TrustedLen</code>.\nSealed traits and implementations to handle all <em>physical </em>…\nReturns the left value\nReturns the right value\nMisc utilities used in different places in the crate.\nThis crates a hashmap with the specified capacity using …\nA trait representing an immutable Arrow array. Arrow …\nIterator of values of an <code>ArrayAccessor</code>.\nTrait providing bi-directional conversion between arrow2 …\nA <code>BinaryArray</code> is Arrow’s semantically equivalent of an …\nIterator of values of an <code>BinaryArray</code>.\nA <code>BooleanArray</code> is Arrow’s semantically equivalent of an …\nA type definition <code>PrimitiveArray</code> for <code>days_ms</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>\nAn <code>Array</code> whose values are stored as indices. This <code>Array</code> is …\nTrait denoting <code>NativeType</code>s that can be used as keys of a …\nThe Arrow’s equivalent to an immutable …\nThe Arrow’s equivalent to an immutable …\nA type definition <code>PrimitiveArray</code> for <code>f16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f16</code>\nA type definition <code>PrimitiveArray</code> for <code>f32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f32</code>\nA type definition <code>PrimitiveArray</code> for <code>f64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f64</code>\nTrait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …\nA type definition <code>PrimitiveArray</code> for <code>i128</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i128</code>\nA type definition <code>PrimitiveArray</code> for <code>i16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i16</code>\nA type definition <code>PrimitiveArray</code> for <code>i256</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i256</code>\nA type definition <code>PrimitiveArray</code> for <code>i32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i32</code>\nA type definition <code>PrimitiveArray</code> for <code>i64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i64</code>\nA type definition <code>PrimitiveArray</code> for <code>i8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i8</code>\nThe corresponding <code>IntegerType</code> of this key\nAn <code>Array</code> semantically equivalent to …\nIterator of values of a <code>ListArray</code>.\nAn array representing a (key, value), both of arbitrary …\nA type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>\nA trait describing a mutable array; i.e. an array whose …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …\nA <code>MutableArray</code> that builds a <code>BinaryArray</code>. It differs from …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …\nA mutable, strong-typed version of <code>DictionaryArray</code>.\nThe Arrow’s equivalent to a mutable …\nThe mutable version of <code>FixedSizeListArray</code>.\nThe mutable version of <code>ListArray</code>.\nA distinct type to disambiguate clashing methods\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …\nConverting a <code>MutableStructArray</code> into a <code>StructArray</code> is <code>O(1)</code>.\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nThe concrete <code>Array</code> of <code>DataType::Null</code>.\nA <code>PrimitiveArray</code> is Arrow’s semantically equivalent of …\nA trait describing the ability of a struct to receive new …\nA <code>StructArray</code> is a nested <code>Array</code> with an optional validity …\nA trait describing the ability of a struct to create …\nA trait describing the ability of a struct to extend from …\nA trait describing the ability of a struct to receive new …\nA type definition <code>PrimitiveArray</code> for <code>u16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u16</code>\nA type definition <code>PrimitiveArray</code> for <code>u32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u32</code>\nA type definition <code>PrimitiveArray</code> for <code>u64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u64</code>\nA type definition <code>PrimitiveArray</code> for <code>u8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u8</code>\n<code>UnionArray</code> represents an array whose each slot can contain …\nA <code>Utf8Array</code> is arrow’s semantic equivalent of an …\nIterator of values of an <code>Utf8Array</code>.\nIf the key type always can be converted to <code>usize</code>.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the values of this array, cloning …\nApplies a function <code>f</code> to the values of this array, cloning …\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nConverts itself to a reference of <code>Any</code>, which enables …\nConvert to <code>Any</code>, to enable dynamic casting.\nConverts itself to a mutable reference of <code>Any</code>, which …\nConvert itself to an (immutable) atomically reference …\nConvert itself to an (immutable) <code>Array</code>.\nConvert to mutable <code>Any</code>, to enable dynamic casting.\nRepresents this key as a <code>usize</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nReturns the capacity in number of items\nReturns the capacity of this array\nReturns the capacity of this <code>MutablePrimitiveArray</code>.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReturns the capacity in number of items\nClones a dynamic <code>Array</code>.\nThe <code>DataType</code> of the <code>Array</code>. In combination with …\nThe <code>DataType</code> of the array.\nReturns the <code>DataType</code> of this array.\nReturns the arrays’ <code>DataType</code>.\nReturns the <code>DataType</code> of this <code>DictionaryArray</code>\nReturns the arrays’ <code>DataType</code>.\nReturns the <code>DataType</code> of this array.\nReturns the default <code>DataType</code> of this container: …\nReturns the default <code>DataType</code>, <code>DataType::Binary</code> or …\nReturns the default <code>DataType</code> of this container: …\nReturns a default <code>DataType</code> of this array, which depends on …\nReturns a <code>DataType</code> consistent with <code>FixedSizeListArray</code>.\nReturns a default <code>DataType</code>: inner field is named “item”…\nLogically compares two <code>Array</code>s. Two arrays are logically …\nExtends the <code>MutablePrimitiveArray</code> with a constant\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtends the <code>MutablePrimitiveArray</code> from a slice\nExtends the <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of trusted …\nExtends the <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nExtends <code>MutableBinaryValuesArray</code> from an iterator of …\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends <code>MutableUtf8Array</code> from an iterator of trusted len.\nExtends <code>MutableUtf8ValuesArray</code> from an iterator of trusted …\nExtends the <code>MutableBinaryArray</code> from an iterator of trusted …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an <code>iterator</code> of values …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an iterator of values. …\nExtends the <code>MutableUtf8Array</code> from an iterator of values. …\nReturns the field (guaranteed to be a <code>Struct</code>)\nReturns the fields of this <code>StructArray</code>.\nThe fields.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableBinaryArray</code> from a slice of optional …\nCreates a new <code>BinaryArray</code> from a slice of optional <code>&amp;[u8]</code>.\nReturns the argument unchanged.\nCreates a new <code>MutableBooleanArray</code> out of a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from a slice of …\nCreates a new <code>FixedSizeBinaryArray</code> from a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableUtf8Array</code> from a slice of optional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nReturns the argument unchanged.\nConvert an <code>arrow_data::ArrayData</code> to arrow2 <code>Array</code>\nCreate this <code>Array</code> from [<code>ArrayData</code>]\nCreate this array from <code>ArrayData</code>\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>[BooleanArray]</code> from its internal representation. …\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>FixedSizeBinaryArray</code> from an iterator of …\nCreates a new <code>MutableBinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nReturns a new <code>BinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableUtf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>Utf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>BinaryArray</code> from slices of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from a slice of <code>bool</code>.\nCreates a new <code>BooleanArray</code> from a slice of <code>bool</code>.\nCreates a <code>FixedSizeBinaryArray</code> from a slice of arrays of …\nCreates a <code>MutablePrimitiveArray</code> from a slice of values.\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nReturns a <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nCreates a <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from a <code>TrustedLen</code>\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from a <code>TrustedLen</code>.\nCreates a <code>PrimitiveArray</code> from a <code>TrustedLen</code> of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates a <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator of …\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>MutablePrimitiveArray</code> from an iterator of …\nCreates a <code>PrimitiveArray</code> from an iterator of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator of …\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nReturns a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>.\nCreates a new <code>MutablePrimitiveArray</code> out an iterator over …\nCreates a (non-null) <code>PrimitiveArray</code> from a <code>TrustedLen</code> of …\nCreates a new <code>MutableUtf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.\nReturns a (non-null) <code>Utf8Array</code> created from a <code>TrustedLen</code> …\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>. Use …\nCreates a new <code>MutablePrimitiveArray</code> from an iterator over …\nCreates a new <code>PrimitiveArray</code> from an iterator over values\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates an empty <code>MutableDictionaryArray</code> preloaded with a …\nCreates a (non-null) <code>PrimitiveArray</code> from an iterator of …\nCreates a (non-null) <code>MutablePrimitiveArray</code> from a vector …\nCreates a (non-null) <code>PrimitiveArray</code> from a vector of …\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns a the inner <code>Field</code>\nReturns a the inner <code>DataType</code>\nReturns a function that writes the element of <code>array</code> at …\nReturns the fields the <code>DataType::Struct</code>.\nReturns all fields from <code>DataType::Union</code>.\nReturns an option of a mutable reference to the values of …\nReturns a function that writes the value of the element of …\nContains the trait <code>Growable</code> and corresponding concreate …\nReturns the index and slot of the field to select from …\nReturns the index and slot of the field to select from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Arc&lt;dyn Array&gt;</code>\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nDeconstructs the <code>StructArray</code> into its individual …\nExtract the low-end APIs from the <code>MutableUtf8Array</code>.\nCreates an empty <code>MutableDictionaryArray</code> retaining the same …\nExtract the low-end APIs from the <code>MutableBinaryValuesArray</code>.\nReturns its internal representation\nReturns its internal representation\nExtract the low-end APIs from the <code>MutablePrimitiveArray</code>.\nReturns its internal representation\nExtract the low-end APIs from the <code>MutableStructArray</code>.\nExtract the low-end APIs from the <code>MutableUtf8ValuesArray</code>.\nReturns its internal representation\nTry to convert this <code>BinaryArray</code> to a <code>MutableBinaryArray</code>\nTry to convert this <code>BooleanArray</code> to a <code>MutableBooleanArray</code>\nTry to convert this <code>PrimitiveArray</code> to a …\nTry to convert this <code>Utf8Array</code> to a <code>MutableUtf8Array</code>\nwhether the array is empty\nWhether the array is empty.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nReturns whether the values of this <code>DictionaryArray</code> are …\nReturns whether the <code>DataType::Union</code> is sparse or not.\nReturns whether slot <code>i</code> is valid.\nWhether <code>index</code> is valid / set.\nReturns an iterator of <code>&amp;[u8]</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code> over every element of …\nReturns an iterator over the optional values of this …\nReturns an iterator over the optional values of this …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Scalar&gt;&gt;</code>.\nconstructs a new iterator\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator over <code>Option&lt;T&gt;</code>\nReturns an iterator over the values and validity, …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator over the the optional values of  …\nReturns iterator over the values of …\nReturns the keys’ value of the <code>DictionaryArray</code> as <code>usize</code>\nReturns the dictionary keys\nReturns the keys of the <code>DictionaryArray</code>. These keys can be …\nReturns an iterator of the keys’ of the <code>DictionaryArray</code> …\nReturns an iterator of the keys’ values of the …\nThe length of the <code>Array</code>. Every array has a length …\nThe length of the array.\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe values as a mutable reference\nThe values\nThe mutable values\nReturns an empty <code>MutableBinaryValuesArray</code>.\nCreates a new empty <code>MutableBinaryArray</code>.\nAlias for unwrapping <code>Self::try_new</code>\nCreates an new empty <code>MutableBooleanArray</code>.\nAlias to <code>Self::try_new().unwrap()</code>\nCreates an empty <code>MutableDictionaryArray</code>.\nCreates a new empty <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nAlias to <code>Self::try_new(...).unwrap()</code>\nCreates a new empty <code>MutableListArray</code>.\nCreates a new <code>ListArray</code>.\nCreates a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>MutableNullArray</code>.\nCreates a new empty <code>MutablePrimitiveArray</code>.\nAlias for <code>Self::try_new(..).unwrap()</code>.\nCreates a new <code>MutableStructArray</code>.\nReturns a new <code>StructArray</code>\nReturns a new <code>UnionArray</code>.\nInitializes a new empty <code>MutableUtf8Array</code>.\nReturns an empty <code>MutableUtf8ValuesArray</code>.\nCreates a new <code>Utf8Array</code>.\nCreates a new <code>ArrayValuesIter</code>\nCreates an empty <code>BinaryArray</code>, i.e. whose <code>.len</code> is zero.\nReturns a new empty <code>BooleanArray</code>.\nReturns a new empty <code>DictionaryArray</code>.\nReturns a new empty <code>FixedSizeBinaryArray</code>.\nReturns a new empty <code>FixedSizeListArray</code>.\nReturns a new empty <code>ListArray</code>.\nReturns a new empty <code>MapArray</code>.\nReturns a new empty <code>NullArray</code>.\nReturns a new empty (zero-length) <code>PrimitiveArray</code>.\nCreates an empty <code>StructArray</code>.\nCreates a new empty <code>UnionArray</code>.\nReturns a new empty <code>Utf8Array</code>.\nCreates a new <code>Array</code> with a <code>Array::len</code> of 0.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>, <code>Offsets</code>…\nCreates an null <code>BinaryArray</code>, i.e. whose …\nReturns a new <code>BooleanArray</code> whose all slots are null / <code>None</code>.\nReturns an <code>DictionaryArray</code> whose all elements are null\nReturns a new null <code>FixedSizeBinaryArray</code>.\nReturns a new null <code>FixedSizeListArray</code>.\nReturns a new null <code>ListArray</code>.\nReturns a new null <code>MapArray</code> of <code>length</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>PrimitiveArray</code> where all slots are null / …\nCreates a null <code>StructArray</code> of length <code>length</code>.\nCreates a new null <code>UnionArray</code>.\nReturns a new <code>Utf8Array</code> whose all slots are null / <code>None</code>.\nCreates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …\nCreate a <code>MutableUtf8Array</code> out of low-end APIs.\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nCreates a new <code>Utf8Array</code> without checking for offsets …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>.\nThe number of null slots on this <code>Array</code>.\nThe offsets of the array\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>BinaryArray</code>.\nThe offsets\nThe offsets [<code>Buffer</code>].\nreturns the offsets\nThe optional offsets.\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>Utf8Array</code>.\nContains functions and function factories to order values …\nPop the last entry from <code>MutableBinaryValuesArray</code>. This …\nPop the last entry from <code>MutableBinaryArray</code>. This function …\nPop an entry from <code>MutableBooleanArray</code>. Note If the values …\nPop the last entry from <code>MutableFixedSizeBinaryArray</code>. This …\nPop a value from the array. Note if the values is empty, …\nPop the last entry from <code>MutableUtf8Array</code>. This function …\nPop the last entry from <code>MutableUtf8ValuesArray</code>. This …\nPushes a new item to the array.\nPushes a new element to the array.\nPushes a new entry to <code>MutableBooleanArray</code>.\npushes a new entry to <code>MutableFixedSizeBinaryArray</code>.\nAdds a new value to the array.\nCall this once for each “row” of children you push.\nPushes a new element to the array.\nPushes a new item to the array.\nAdds a new null element to the array.\npushes a null value\nPush a new element that holds the invariants of the struct.\nSafety\nNeeds to be called when a valid value was extended to this …\nReserves additional slots to its capacity.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of the keys of this <code>DictionaryArray</code>.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the values of this <code>BooleanArray</code>.\nSets values.\nUpdate the values of this <code>PrimitiveArray</code>.\nShrink the array to fit its length.\nShrinks the capacity of the <code>MutableBinaryValuesArray</code> to …\nShrinks the capacity of the <code>MutableBinaryArray</code> to fit its …\nShrinks the capacity of the <code>MutableBooleanArray</code> to fit its …\nShrinks the capacity of the <code>MutableDictionaryArray</code> to fit …\nShrinks the capacity of the <code>MutableFixedSizeBinaryArray</code> to …\nShrinks the capacity of the <code>MutableFixedSizeListArray</code> to …\nShrinks the capacity of the <code>MutableListArray</code> to fit its …\nShrinks the capacity of the <code>MutablePrimitiveArray</code> to fit …\nShrinks the capacity of the <code>MutableStructArray</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8Array</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8ValuesArray</code> to fit …\nreturns the (fixed) size of the <code>MutableFixedSizeBinaryArray</code>…\nReturns the size\nReturns the size (number of elements per slot) of this …\nReturns the size (number of elements per slot) of this …\nSlices this <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nSlices the <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns a new <code>FixedSizeBinaryArray</code> with a different …\nChanges the arrays’ <code>DataType</code>, returning a new …\nReturns a new <code>PrimitiveArray</code> with a different logical type.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nConvert an arrow2 <code>Array</code> to <code>arrow_data::ArrayData</code>\nConvert this <code>Array</code> into [<code>ArrayData</code>]\nConvert this array into <code>arrow_data::ArrayData</code>\nSame as <code>into_empty</code> but clones the inner value map instead …\nCreates an empty <code>MutableDictionaryArray</code> from a given empty …\nFallible version of <code>Extend::extend</code>.\nThis is infalible and is implemented for consistency with …\nThis is infalible and is implemented for consistency with …\nExpand this array, using elements from the underlying …\nTries to extend itself with elements from <code>other</code>, failing …\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from an iterator …\nCreates a <code>FixedSizeBinaryArray</code> from an fallible iterator …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator.\nReturns a new <code>DictionaryArray</code>.\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an fallible iterator of trusted …\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an fallible iterator of trusted …\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an falible iterator of trusted …\nReturns a the inner <code>Field</code>\nReturns a <code>MutableBinaryValuesArray</code> created from its …\nReturns a <code>MutableBinaryArray</code> created from its internal …\nReturns a <code>BinaryArray</code> created from its internal …\nThe canonical method to create a <code>MutableBooleanArray</code> out …\nThe canonical method to create a <code>BooleanArray</code> out of …\nReturns a new <code>DictionaryArray</code>.\nCreates a new <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeListArray</code>.\nCreates a new <code>ListArray</code>.\nReturns a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nThe canonical method to create a <code>MutablePrimitiveArray</code> out …\nThe canonical method to create a <code>PrimitiveArray</code> out of its …\nCreate a <code>MutableStructArray</code> out of low-end APIs.\nReturns a new <code>StructArray</code>.\nReturns a new <code>UnionArray</code>.\nReturns a <code>MutableUtf8Array</code> created from its internal …\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nReturns a <code>Utf8Array</code> created from its internal …\nReturns a new <code>DictionaryArray</code>.\nCreates a new <code>Utf8Array</code> without checking for offsets …\nTries to push a new element.\nThis is infalible and is implemented for consistency with …\ntries to push a new entry to <code>MutableFixedSizeBinaryArray</code>.\nThis is infalible and is implemented for consistency with …\nNeeds to be called when a valid value was extended to this …\nNeeds to be called when a valid value was extended to this …\nThe types.\nThe validity of the <code>Array</code>: every array has an optional …\nThe optional validity of the array.\nThe optional validity.\nReturns the optional validity.\nThe optional validity. Equivalent to <code>self.keys().validity()</code>…\nThe optional validity.\nThe optional validity.\nThe optional validity.\nReturns the optional validity.\nThe optional validity.\nThe optional validity.\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the value at index <code>i</code>\nReturns the value of the <code>DictionaryArray</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns value at position <code>i</code>.\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>.\nReturns the value at slot <code>i</code>.\nReturn the <code>i</code>th child array.\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code> as bool\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns the element at index <code>i</code> as &amp;str\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as &amp;str\nReturns the element at index <code>i</code>.\nReturns the value at index <code>i</code>. The value on null slots is …\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nThe values of the array\nreturns its values.\nreturns its values.\nReturns the values of this <code>BinaryArray</code>.\nReturns its values.\nThe values <code>Bitmap</code>. Values on null slots are undetermined …\nreturns a reference to the inner values.\nReturns the values of the <code>DictionaryArray</code>.\nReturns its values.\nReturns the values allocated on this <code>FixedSizeBinaryArray</code>.\nThe inner values\nReturns the inner array.\nThe values\nThe values.\nReturns its values.\nThe values <code>Buffer</code>. Values on null slots are undetermined …\nThe values\nReturns the values of this <code>StructArray</code>.\nreturns its values.\nreturns its values.\nReturns the values of this <code>Utf8Array</code>.\nReturns an iterator over the values of this array\nReturns an iterator of <code>&amp;[u8]</code> over every element of this …\nReturns an iterator over the values of this …\nReturns an iterator over the values of this <code>BooleanArray</code>.\nReturns an iterator of <code>Box&lt;dyn Scalar&gt;</code>\nReturns iterator over the values of <code>FixedSizeBinaryArray</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>T</code>\nReturns an iterator of the values, <code>&amp;T</code>, ignoring the arrays…\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator over the the values [<code>V::IterValue</code>].\nReturns a mutable slice of values.\nReturns a mutable slice of values.\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nCreates an new <code>MutableBooleanArray</code> with a capacity of …\nCreates a new <code>MutableFixedSizeBinaryArray</code> with capacity …\nCreates a new <code>MutableListArray</code> with a capacity.\nCreates a new <code>MutablePrimitiveArray</code> with a capacity.\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nCreates a new <code>MutablePrimitiveArray</code> from a capacity and …\nClones this <code>Array</code> with a new new assigned bitmap.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this <code>DictionaryArray</code> with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns a clone of this <code>BooleanArray</code> with new values.\nReturns this <code>PrimitiveArray</code> with new values.\nDescribes a struct that can be extended from slices of …\nConcrete <code>Growable</code> for the <code>BinaryArray</code>.\nConcrete <code>Growable</code> for the <code>BooleanArray</code>.\nConcrete <code>Growable</code> for the <code>DictionaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeListArray</code>.\nConcrete <code>Growable</code> for the <code>ListArray</code>.\nConcrete <code>Growable</code> for the <code>MapArray</code>.\nConcrete <code>Growable</code> for the <code>NullArray</code>.\nConcrete <code>Growable</code> for the <code>PrimitiveArray</code>.\nConcrete <code>Growable</code> for the <code>StructArray</code>.\nConcrete <code>Growable</code> for the <code>UnionArray</code>.\nConcrete <code>Growable</code> for the <code>Utf8Array</code>.\nConverts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …\nConverts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …\nExtends this <code>Growable</code> with elements from the bounded <code>Array</code> …\nExtends this <code>Growable</code> with null elements, disregarding the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current length of the <code>Growable</code>.\nCreates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.\nCreates a new <code>GrowableBinary</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableUnion</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableBoolean</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeBinary</code> bound to <code>arrays</code> with …\nCreates a new <code>GrowableNull</code>.\nCreates a new <code>GrowablePrimitive</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableMap</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableStruct</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableUtf8</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableDictionary</code> bound to <code>arrays</code> with a …\nCompare the values at two arbitrary indices in two arrays.\nreturns a comparison function that compares values at two …\nTotal order of all native types whose Rust implementation …\nimplements comparison using IEEE 754 total ordering for f32\nimplements comparison using IEEE 754 total ordering for f64\nAn immutable container semantically equivalent to …\nThis crates’ equivalent of <code>std::vec::IntoIter</code> for <code>Bitmap</code>.\nA container of booleans. <code>MutableBitmap</code> is semantically …\nCompute bitwise AND operation\nReturns the byte slice of this <code>Bitmap</code>.\nReturns the slice of bytes of this <code>MutableBitmap</code>. Note …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise binary operation to a <code>MutableBitmap</code>.\nReturns the capacity of <code>MutableBitmap</code> in number of bits.\nCreates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.\nReturns an iterator over bits in bit chunks <code>BitChunk</code>.\nEmpties the <code>MutableBitmap</code>.\nExtends <code>MutableBitmap</code> by <code>additional</code> values of constant …\nExtends the <code>MutableBitmap</code> from a <code>Bitmap</code>.\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends <code>self</code> from a <code>TrustedLen</code> iterator.\nExtends <code>self</code> from an iterator of trusted len.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a Vec from an <code>Iterator</code> of <code>BitChunk</code>.\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nInitializes a <code>MutableBitmap</code> with all values set to valid/ …\nInitializes a zeroed <code>MutableBitmap</code>.\nCreate a new <code>Bitmap</code> from an arrow <code>NullBuffer</code>\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a slice and length.\nAlias for <code>Bitmap::try_new().unwrap()</code> This function is <code>O(1)</code>\nInitializes a <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a length. …\nReturns whether the bit at position <code>i</code> is set.\nReturns whether the position <code>index</code> is set.\nReturns whether the bit at position <code>i</code> is set.\nUnsafely returns whether the bit at position <code>i</code> is set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns its internal representation\nConverts this <code>Bitmap</code> to <code>MutableBitmap</code>, returning itself if …\nReturns whether <code>Bitmap</code> is empty\nReturns whether <code>MutableBitmap</code> is empty.\nReturns a new iterator of <code>bool</code> over this bitmap\nconstructs a new iterator over the bits of <code>MutableBitmap</code>.\nReturns the length of the <code>Bitmap</code>.\nReturns the length of the <code>MutableBitmap</code>.\nConverts this <code>Bitmap</code> into a <code>MutableBitmap</code>, cloning its …\nInitializes an empty <code>Bitmap</code>.\nCreates a new <code>IntoIter</code> from a <code>Bitmap</code>\nInitializes an empty <code>MutableBitmap</code>.\nInitializes an new <code>Bitmap</code> filled with set/unset values.\nInitializes an new <code>Bitmap</code> filled with set values.\nInitializes an new <code>Bitmap</code> filled with unset values.\nReturns the number of unset bits on this <code>Bitmap</code>.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nCounts the nulls (unset bits) starting from <code>offset</code> bits …\nCompute bitwise OR operation\nPop the last bit from the <code>MutableBitmap</code>. Note if the …\nPushes a new bit to the <code>MutableBitmap</code>, re-sizing it if …\nPushes a new bit to the <code>MutableBitmap</code>\nApply a bitwise operation <code>op</code> to four inputs and return the …\nReserves <code>additional</code> bits in the <code>MutableBitmap</code>, potentially …\nSets the position <code>index</code> to <code>value</code>\nSets the position <code>index</code> to <code>value</code>\nShrinks the capacity of the <code>MutableBitmap</code> to fit its …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offseting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offseting by <code>offset</code> and truncating up to …\nApply a bitwise operation <code>op</code> to three inputs and return …\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an falible iterator of …\nInitializes a new <code>Bitmap</code> from vector of bytes and a length.\nInitializes a new <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a …\nApply a bitwise operation <code>op</code> to one input and return the …\nApplies a function to every bit of this <code>MutableBitmap</code> in …\nReturns the number of unset bits on this <code>Bitmap</code>.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nGeneral utilities for bitmaps representing items where LSB …\nInitializes a pre-allocated <code>MutableBitmap</code> with capacity …\nCompute bitwise XOR operation\nA chunk of bits. This is used to create masks of a given …\nTrait representing an exact iterator over bytes in <code>BitChunk</code>…\nThis struct is used to efficiently iterate over bit masks …\nAn iterator over a slice of bytes in <code>BitChunk</code>s.\nAn iterator over mutable slices of bytes of exact size.\nAn iterator over bits according to the LSB, i.e. the bytes …\nThere are null values\nThere are no null values\nIterator over a bitmap that returns slices of set regions …\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the number of bytes required to hold <code>bits</code> bits.\nReturns the number of zero bits in the slice offsetted by …\nFormats <code>bytes</code> taking into account an offset and length of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconvert itself from bytes.\nReturns whether bit at position <code>i</code> in <code>data</code> is set\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are still elements in this iterator\nReturns whether bit at position <code>i</code> in <code>byte</code> is set or not\nReturns the number of chunks of this iterator\nCreates a new <code>BitChunksExact</code>.\nCreates a <code>BitChunks</code>.\nReturns a new <code>BitChunksExactMut</code>\nCreates a new <code>BitmapIter</code>.\nCreates a new <code>SlicesIterator</code>\nCreates a new <code>ZipValidityIter</code>.\nReturns a new <code>ZipValidity</code>\nReturns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …\nThe remainder of the iterator.\nReturns the remaining <code>BitChunk</code>. It is zero iff <code>len / 8 == 0</code>…\nReturns the remainder <code>BitChunk</code>.\nThe remainder slice\nAn iterator over individual items of the remainder\nThe number of items in the remainder\nReturns the remainder bits in <code>BitChunks::remainder</code>.\nThe length of the remainder slice in bits.\nSets bit at position <code>i</code> in <code>byte</code>\nSets bit at position <code>i</code> in <code>data</code>\nSets bit at position <code>i</code> in <code>data</code> without doing bound checks\nReturns the total number of slots. It corresponds to the …\nconvert itself into bytes.\nUnwrap into an iterator that has null values.\nUnwrap into an iterator that has no null values.\n<code>Buffer</code> is a contiguous memory region that can be shared …\nBytes representation.\nReturns the byte slice stored in this buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nReturns a mutable reference to its underlying <code>Vec</code>, if …\nReturns a mutable reference to its slice, if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns its internal representation\nReturns a mutable reference to its underlying <code>Vec</code>, if …\nReturns whether the buffer is empty.\nReturns whether underlying data is sliced. If sliced the …\nReturns the number of bytes in the buffer\nCreates an empty <code>Buffer</code>.\nReturns the offset of this buffer.\nSafety\nGet the strong count of underlying <code>Arc</code> data buffer.\nGet the weak count of underlying <code>Arc</code> data buffer.\nSlices this buffer starting at <code>offset</code>.\nSlices this buffer starting at <code>offset</code>.\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nA vector of trait objects of <code>Array</code> where every item has …\nreturns the <code>Array</code>s in <code>Chunk</code>\nreturns the <code>Array</code>s in <code>Chunk</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes <code>Chunk</code> into its underlying arrays. The arrays are …\nreturns whether the columns have any rows\nreturns the number of rows of every array\nCreates a new <code>Chunk</code>.\nCreates a new <code>Chunk</code>.\nDefines kernels suitable to perform operations to …\nDefines generics suitable to perform operations to …\nContains the concatenate kernel\nContains operators to filter arrays such as <code>filter</code>.\nDefines take kernel for <code>Array</code>\nApplies a binary operations to two primitive arrays. This …\nVersion of binary that creates a mutable bitmap that is …\nVersion of binary that returns an array and bitmap. Used …\nVersion of binary that checks for errors in the closure …\nVersion of unary that checks for errors in the closure …\nApplies an unary and infallible function to a …\nVersion of unary that creates a mutable bitmap that is …\nVersion of unary that returns an array and bitmap. Used …\nApplies a binary function to two <code>PrimitiveArray</code>s, …\nApplies an unary function to a <code>PrimitiveArray</code>, optionally …\nConcatenate multiple Array of the same type into a single …\nFunction that can filter arbitrary arrays\nReturns a prepared function optimized to filter multiple …\nFilters an Array, returning elements matching the filter …\nReturns a new Chunk with arrays containing only values …\nChecks if an array of type <code>datatype</code> can perform take …\nReturns a new <code>Array</code> with only indices at <code>indices</code>. Null …\nAn extension trait to polyfill <code>Arc::unwrap_or_clone</code> from …\nOpaque binary data of variable length.\nOpaque binary data of variable length whose offsets are …\nA boolean represented as a single bit.\n<code>true</code> and <code>false</code>.\nThe set of supported logical types in this crate.\nAn <code>i32</code> representing the elapsed time since UNIX epoch …\nAn <code>i64</code> representing the elapsed time since UNIX epoch …\nThe number of elapsed days and milliseconds, stored as 2 …\nTwo i32 representing days and ms\nDecimal value with precision and scale precision is the …\nDecimal backed by 256 bits\nDense union\nA dictionary encoded array by <code>IntegerType</code>.\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time. This elapsed time is a physical …\nExtension type.\nRepresents Arrow’s metadata of a “column”.\nOpaque binary data of fixed size.\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some data type with fixed length.\nA list of some logical data type with a fixed number of …\nA 16-bit floating point number.\nAn 16-bit float\nA 32-bit floating point number.\nA <code>f32</code>\nA 64-bit floating point number.\nA <code>f64</code>\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 16-bit integer.\nAn <code>i16</code>\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 32-bit integer.\nAn <code>i32</code>\nA signed 64-bit integer.\nA signed 64-bit integer.\nAn <code>i64</code>\nA signed 8-bit integer.\nA signed 8-bit integer.\nAn <code>i8</code>\nthe set of valid indices types of a dictionary-encoded …\nA “calendar” interval modeling elapsed time that takes …\nInterval units defined in Arrow\nOpaque binary data of variable length and 64-bit offsets.\nOpaque binary data of variable length whose offsets are …\nA list of some data type with variable length and 64-bit …\nA list of some logical data type whose offsets are …\nA variable-length string in Unicode with UFT-8 encoding …\nA variable-length UTF-8 encoded string whose offsets are …\nA list of some data type with variable length.\nA list of some logical data type whose offsets are …\nA nested type.\nA nested type that is represented as\ntypedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …\nTime in microseconds.\nTime in milliseconds.\nmonths_days_ns(i32, i32, i64)\nThe number of elapsed months (i32), days (i32) and …\nTime in nanoseconds.\nA Null with no allocation.\nNull type\nThe set of physical types: unique in-memory …\nAn array where each slot has a known compile-time size.\nThe set of all implementations of the sealed trait …\nAn ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.\ntypedef for <code>Arc&lt;Schema&gt;</code>.\nTime in seconds.\nSparse union\nA nested type that contains an arbitrary number of fields.\nA nested <code>DataType</code> with a given number of <code>Field</code>s.\nA 32-bit time representing the elapsed time since midnight …\nA 64-bit time representing the elapsed time since midnight …\nThe time units defined in Arrow.\nA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …\nAn unsigned 16-bit integer.\nAn unsigned 16-bit integer.\nAn <code>u16</code>\nAn unsigned 32-bit integer.\nAn unsigned 32-bit integer.\nAn <code>u32</code>\nAn unsigned 64-bit integer.\nAn unsigned 64-bit integer.\nAn <code>u64</code>\nAn unsigned 8-bit integer.\nAn unsigned 8-bit integer.\nAn <code>u8</code>\nA nested type that represents slots of differing types.\nA nested datatype that can represent slots of differing …\nMode of <code>DataType::Union</code>\nA variable-length string in Unicode with UTF-8 encoding.\nA variable-length UTF-8 encoded string whose offsets are …\nThe number of elapsed whole months.\nReturns the <code>Field</code>’s <code>DataType</code>.\nIts logical <code>DataType</code>\nWhether this physical type equals <code>PhysicalType::Primitive</code> …\nThe fields composing this schema.\nReturns a new <code>Schema</code> with a subset of all fields whose …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nsupport get extension for metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the mode is dense\nIts nullability\nReturns whether the mode is sparse\nAdditional custom (opaque) metadata.\nOptional metadata.\nIts name\nCreates a new <code>Field</code>.\nConstructs a <code>UnionMode::Sparse</code> if the input bool is true, …\nReturns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …\nthe <code>PhysicalType</code> of this <code>DataType</code>.\nIf we have the only reference to <code>T</code> then unwrap it. …\nCreates a new <code>Field</code> with metadata.\nAttaches a <code>Metadata</code> to <code>Schema</code>\nContains the error value\nEnum with all errors in this crate.\nWrapper for an error triggered by a dependency\nError during import or export to/from a format\nWhen an invalid argument is passed to a function.\nWrapper for IO errors\nReturned when functionality is not yet available.\nContains the success value\nWhenever incoming data from the C data interface, IPC or …\nWhenever pushing to a container fails because it does not …\nTypedef for a <code>std::result::Result</code> of an <code>Error</code>.\nReturns the argument unchanged.\nWraps an external error in an <code>Error</code>.\nCalls <code>U::from(self)</code>.\nABI-compatible struct for <code>ArrowArray</code>\nABI-compatible struct for <code>ArrowArrayStream</code>.\nImplements an iterator of <code>Array</code> consumed from the C stream …\nABI-compatible struct for <code>ArrowSchema</code>\ncreate an empty ArrowSchema\ncreates an empty <code>ArrowArray</code>, which can be used to import …\nCreates an empty <code>ArrowArrayStream</code> used to import from a …\nExports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.\nExports a <code>Field</code> to the C data interface.\nExports an iterator to the C stream interface\nReturns the field provided by the stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImports an <code>Array</code> from the C data interface.\nImports a <code>Field</code> from the C data interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctionality to mmap in-memory data regions.\nAdvances this iterator by one array\nReturns a new <code>ArrowArrayStreamReader</code>\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nAPIs to read from and write to Arrow’s IPC format.\nAPIs to represent <code>Chunk</code> as a formatted table.\nStruct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …\nStruct containing fields and whether the file is written …\nA struct adapter of Read+Seek+Write to append to IPC files\ndictionary id\noptional children\nThe fields in the schema\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEndianness of the file\nAPIs to read Arrow’s IPC format.\nAPIs to write to Arrow’s IPC format.\nhow dictionaries are tracked in this crate\nThe record contains a number of buffers that does not …\nMetadata of an Arrow IPC file, written in the footer of …\nAn iterator of <code>Chunk</code>s from an Arrow IPC file.\nA bitmap’s size is smaller than the required for the …\nA buffer’s size is smaller than the required for the …\nA buffer’s size is larger than the file size\nFixedSizeBinaryArray has invalid datatype.\nThe block is an invalid flatbuffer\nThe message’s body length is an invalid flatbuffer\nThe message’s buffers is an invalid flatbuffer\nThe compression is an invalid flatbuffer\nThe message’s data is an invalid flatbuffer\nThe footer’s dictionaries is an invalid flatbuffer\nThe footer is an invalid flatbuffer\nThe message’s header is an invalid flatbuffer\nThe dictionary id is an invalid flatbuffer\nThe dictionary is_delta is an invalid flatbuffer\nThe dictionary message is an invalid flatbuffer\nThe message’s nodes is an invalid flatbuffer\nThe footer’s record batches is an invalid flatbuffer\nThe footer’s schema is an invalid flatbuffer\nThe version is an invalid flatbuffer\nThe IPC file does not end with [b’A’, b’R’, b’R…\nThe IPC file does not start with [b’A’, b’R’, b’R…\nInvalid dictionary id\nField id is not a dictionary\nThe message does not contain data\nThe file’s schema does not contain fields\nRecordBatch messages do not contain buffers\nThe message does not contain a header\nRecordBatch messages does not contain nodes\nThe file’s footer does not contain record batches\nThe file’s footer does not contain a schema\nThe first 4 bytes of the last 10 bytes is &lt; 0\nThe different types of errors that reading from IPC can …\nNext item in the stream\nMetadata of an Arrow IPC stream, written at the start of …\nArrow Stream reader.\nEncodes the stream’s status after each read.\ndictionaries can only contain dictionary messages; record …\nRelative positions in the file is &lt; 0\nA live stream without data\nThe blocks in the file\nDeserialize an flatbuffers-encoded Schema message into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this FileReader, returning the underlying reader\nThe files’ <code>IpcSchema</code>\nThe IPC fields tracking dictionaries\nCheck if the stream is finished\nReturns the <code>FileMetadata</code>\nReturn the schema of the stream\nCreates a new <code>FileReader</code>. Use <code>projection</code> to only take …\nTry to create a new stream reader\nReads the record batch at position <code>index</code> from the reader.\nReads all file’s dictionaries, if any This function is …\nRead the Arrow IPC file’s metadata\nReads the metadata of the stream\nReturn the schema of the file\nReturn the schema of the file\nThe schema that is read from the file footer\nThe schema that is read from the stream’s first message\nSet the inner memory scratches so they can be reused in a …\nThe total size of the file in bytes\nReturn the data inside this wrapper.\nThe IPC version of the stream\nThe size of the IPC buffer\nnumber of bytes of all buffers in the record\nthe size of the file\nDeclared number of elements in the buffer\nDeclared length of the bitmap\nNumber of bits on the IPC buffer\nThe requested dictionary id\nThe requested dictionary id\nBytes required for the <code>length</code> and <code>type</code>\nThe name of the <code>NativeType</code>\nCompression codec\nArrow file writer\nLZ4 (framed)\nAn array <code>Chunk</code> with optional accompanying IPC fields.\nArrow stream writer\nOptions declaring the behaviour of writing to IPC\nZSTD\nGet the Arrow columns in this record.\nWhether the buffers should be compressed and which codec …\nAssigns every dictionary field a unique ID\nGet the IPC fields for this record.\nWrite continuation bytes, and mark the stream as done\nWrite footer and closing tag, then mark the writer as done\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes itself, returning the inner writer.\nConsumes itself into the inner writer\nCreates a new <code>StreamWriter</code>\nCreates a new <code>FileWriter</code>.\nConverts a Schema and IpcFields to a flatbuffers-encoded …\nSet the inner memory scratches so they can be reused in a …\nStarts the stream by writing a Schema message to it. Use …\nWrites the header and first (schema) message to the file.\nCreates a new <code>FileWriter</code> from an existing file, seeking to …\nCreates a new <code>FileWriter</code> and writes the header to <code>writer</code>\nWrites an <code>Array</code> to <code>arrow_data</code>\nWrites <code>Chunk</code> to the stream\nWrites <code>Chunk</code> to the file\nReturns a visual representation of <code>Chunk</code>\nMemory maps dictionaries from an IPC file into\nMemory maps an record batch from an IPC file into a <code>Chunk</code>.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nA wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …\nA wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:\nReturns the byte slice stored in this buffer\nReturns the byte slice stored in this buffer\nReturns a reference to its internal <code>Buffer</code>.\nReturns the capacity of <code>Offsets</code>.\nExtends itself with <code>additional</code> elements equal to the last …\nReturns the first offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>Vec</code>.\nReturns the inner <code>Buffer</code>.\nCopy-on-write API to convert <code>OffsetsBuffer</code> into <code>Offsets</code>.\nReturns the last offset of this container.\nReturns the last offset.\nReturns the number of offsets in this container.\nReturns the number of offsets in this container.\nReturns the length an array with these offsets would be.\nReturns the length an array with these offsets would be.\nReturns an iterator with the lengths of the offsets\nReturns an empty <code>Offsets</code> (i.e. with a single element, the …\nReturns an empty <code>OffsetsBuffer</code> (i.e. with a single …\nReturns <code>Offsets</code> assuming that <code>offsets</code> fulfills its …\nSafety\nReturns an <code>Offsets</code> whose all lengths are zero.\nPops the last element\nReturns the range of the offsets.\nReserves <code>additional</code> entries.\nShrinks the capacity of self to fit.\nSlices this <code>OffsetsBuffer</code>.\nSlices this <code>OffsetsBuffer</code> starting at <code>offset</code>.\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nTry extend from an iterator of lengths\nExtends itself from another <code>Offsets</code>\nExtends itself from another <code>Offsets</code> sliced by <code>start, length</code>\nCreates a new <code>Offsets</code> from an iterator of lengths\nTry to create a new <code>Offsets</code> from a sequence of <code>lengths</code>\nPushes a new element with a given length.\nPushes a new element with a given length.\nReturns a new <code>Offsets</code> with a capacity, allocating at least …\nThe <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).\nThe <code>Scalar</code> implementation of a boolean.\nThe <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.\nThe <code>Scalar</code> implementation of fixed size binary ([…\nThe scalar equivalent of <code>FixedSizeListArray</code>. Like …\nThe scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …\nThe scalar equivalent of <code>MapArray</code>. Like <code>MapArray</code>, this …\nThe representation of a single entry of a …\nThe implementation of <code>Scalar</code> for primitive, semantically …\nTrait object declaring an optional value with a <code>DataType</code>. …\nA single entry of a <code>crate::array::StructArray</code>.\nA single entry of a <code>crate::array::UnionArray</code>.\nThe implementation of <code>Scalar</code> for utf8, semantically …\nconvert itself to\nthe logical type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether it is valid\nreturns a new <code>DictionaryScalar</code>\nReturns a new <code>PrimitiveScalar</code>.\nReturns a new <code>Utf8Scalar</code>\nReturns a new <code>BinaryScalar</code>.\nReturns a new <code>BooleanScalar</code>\nreturns a new <code>ListScalar</code>\nreturns a new <code>MapScalar</code>\nA new <code>NullScalar</code>\nReturns a new <code>StructScalar</code>\nreturns a new <code>FixedSizeListScalar</code>\nReturns a new <code>FixedSizeBinaryScalar</code>.\nReturns a new <code>UnionScalar</code>\ncreates a new <code>Scalar</code> from an <code>Array</code>.\nReturns a new <code>PrimitiveScalar</code> with the same value but …\nReturns the type of the union scalar\nThe values of the <code>DictionaryScalar</code>\nReturns the optional value.\nReturns the value irrespectively of the validity.\nIts value\nThe value\nIts value\nReturns the inner value\nThe values of the <code>ListScalar</code>\nThe values of the <code>MapScalar</code>\nReturns the values irrespectively of the validity.\nThe values of the <code>FixedSizeListScalar</code>\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of seconds in a day\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nParses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nCalculates the scale factor between two TimeUnits. The …\nParses a <code>Utf8Array</code> to naive timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nAn iterator of known, fixed size. A trait denoting Rusts’…\nA chunk of bits. This is used to create masks of a given …\nAn [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …\nAn [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code> returning the …\nType denoting its representation as bytes. This is <code>[u8; N]</code> …\nTwo i32 representing days and ms\nThe difference between 1.0 and the next largest …\nA 16-bit floating point number.\nA 32-bit floating point number.\nA 64-bit floating point number.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…\nRange of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 64-bit integer.\nA signed 8-bit integer.\nmonths_days_ns(i32, i32, i64)\nSealed trait implemented by all physical types that can be …\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nThe corresponding variant of <code>PrimitiveType</code>.\nThe set of all implementations of the sealed trait …\nAn unsigned 16-bit integer.\nAn unsigned 32-bit integer.\nAn unsigned 64-bit integer.\nAn unsigned 8-bit integer.\nThe number of days\nThe number of days\nThe in-memory representation of the DayMillisecond variant …\nType representation of the Float16 physical type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from <code>usize</code>.\nFrom bytes in big endian\nCasts from u16.\nCasts an <code>f32</code> into <code>f16</code>\nFrom bytes in little endian\nconvert itself from bytes.\nConvert itself from <code>usize</code>.\nReturns a new <code>i256</code> from two <code>i128</code>.\nPhysical representation of a decimal\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of milliseconds\nThe number of months\nThe in-memory representation of the MonthDayNano variant …\nCreates a new <code>BitChunkIter</code> with <code>len</code> bits.\nCreates a new <code>BitChunkOnes</code> with <code>len</code> bits.\nReturns a new <code>IndexRange</code>.\nA new <code>days_ms</code>.\nA new <code>months_days_ns</code>.\nThe number of nanoseconds\nAn iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.\nContains traits and implementations of multi-data used in …\nTo bytes in big endian\nCasts to u16.\nCasts this <code>f16</code> to <code>f32</code>\nTo bytes in little endian\nconvert itself into bytes.\nConvert itself to <code>usize</code>.\nThe type holding bits for masks.\nDescribes the ability to convert itself from a <code>BitChunk</code>.\nNumber of lanes\nType used for masking.\nThe <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …\nA struct that lends itself well to be compiled leveraging …\nTrait implemented by some <code>NativeType</code> that have a SIMD …\nThe SIMD type associated with this trait. This type …\nReturns a tuple of 3 items whose middle item is itself, …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from a slice.\nConvert itself from a slice.\ncreates a new Self from <code>v</code> by populating items from <code>v</code> up to …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMulti-Data correspondence of the native type\nSets values to <code>default</code> based on <code>mask</code>.\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nAll ones.\nAll zeroes.\nReturns the argument unchanged.\nConstruct a <code>Tuid</code> from the upper and lower halves of a …\nReturns the total size of <code>self</code> on the heap, in bytes.\nThe increment part of the <code>Tuid</code>.\nReturns the <code>n</code>-next logical <code>Tuid</code>.\nCalls <code>U::from(self)</code>.\nApproximate nanoseconds since unix epoch.")
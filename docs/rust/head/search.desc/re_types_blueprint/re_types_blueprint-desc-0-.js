searchState.loadedDescShard("re_types_blueprint", 0, "The core types and traits that power Rerun’s Blueprint …\nAuto-generated blueprint-related types.\n<strong>Archetype</strong>: The description of a container.\n<strong>Archetype</strong>: Shared state for the 3 collapsible panels.\n<strong>Archetype</strong>: The top-level description of the viewport.\nWhich tab is active.\nWhether the viewport layout is determined automatically.\nWhether or not space views should be created automatically.\nThe layout shares of each column in the container.\nThe class of the view.\n<code>ContainerId</code>s or <code>SpaceViewId</code>s that are children of this …\nThe name of the container.\nHow many columns this grid should have.\nShow one tab as maximized?\nHashes of all recommended space views the viewer has …\nThe layout of the space-views\nThe layout shares of each row of the container.\nWhether this container is visible.\n<strong>Archetype</strong>: The description of a container.\nIndicator component for the <code>ContainerBlueprint</code> …\nThe total number of components in the archetype: 1 …\nWhich tab is active.\nThe layout shares of each column in the container.\nThe class of the view.\n<code>ContainerId</code>s or <code>SpaceViewId</code>s that are children of this …\nThe name of the container.\nReturns the argument unchanged.\nHow many columns this grid should have.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ContainerBlueprint</code>.\nThe layout shares of each row of the container.\nWhether this container is visible.\nWhich tab is active.\nThe layout shares of each column in the container.\n<code>ContainerId</code>s or <code>SpaceViewId</code>s that are children of this …\nThe name of the container.\nHow many columns this grid should have.\nThe layout shares of each row of the container.\nWhether this container is visible.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Shared state for the 3 collapsible panels.\nIndicator component for the <code>PanelBlueprint</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>PanelBlueprint</code>.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: The top-level description of the viewport.\nIndicator component for the <code>ViewportBlueprint</code> …\nWhether the viewport layout is determined automatically.\nWhether or not space views should be created automatically.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShow one tab as maximized?\nCreate a new <code>ViewportBlueprint</code>.\nHashes of all recommended space views the viewer has …\nThe layout of the space-views\nWhether the viewport layout is determined automatically.\nWhether or not space views should be created automatically.\nShow one tab as maximized?\nHashes of all recommended space views the viewer has …\nThe layout of the space-views\n<strong>Component</strong>: The active tab in a tabbed container.\n<strong>Component</strong>: Whether empty cells in a dataframe should be …\n<strong>Component</strong>: Whether the viewport layout is determined …\n<strong>Component</strong>: Whether or not space views should be created …\n<strong>Component</strong>: The type of the background in a view.\nVisible, but as small as possible on its shorter axis.\n<strong>Component</strong>: The layout share of a column in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\n<strong>Component</strong>: The kind of a blueprint container (tabs, grid, …\n<strong>Component</strong>: One of four 2D corners, typically used to align …\nFully expanded.\nScale the image for the largest possible fit in the view’…\nScale the image for the largest possible fit in the view’…\n<strong>Component</strong>: Configuration for a filter-by-range feature of …\n<strong>Component</strong>: Configuration for the filter is not null …\nA bright gradient.\nA dark gradient.\nOrganize children in a grid layout\n<strong>Component</strong>: How many columns a grid container should have.\nCompletely hidden.\nOrder the children left to right\n<strong>Component</strong>: All the contents in the container.\n<strong>Component</strong>: The unique id of a space view, used to refer to …\n<strong>Component</strong>: Whether the entity can be interacted with.\nLeft bottom corner.\nLeft top corner.\n<strong>Component</strong>: Indicate whether the range should be locked …\n<strong>Component</strong>: Name of the map provider to be used in Map …\nMapbox Dark is a dark-themed map designed by Mapbox.\nMapbox Satellite is a satellite map designed by Mapbox.\nMapbox Streets is a minimalistic map designed by Mapbox.\n<code>OpenStreetMap</code> is the default map provider.\nNo scaling, pixel size will match the image’s …\n<strong>Component</strong>: Tri-state for panel controls.\n<strong>Component</strong>: An individual query expression used to filter a …\nRight bottom corner.\nRight top corner.\n<strong>Component</strong>: The container that sits at the root of a …\n<strong>Component</strong>: The layout share of a row in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\nSimple uniform color.\n<strong>Component</strong>: The class identifier of view, e.g. <code>&quot;2D&quot;</code>, …\n<strong>Component</strong>: Whether a space view is maximized.\n<strong>Component</strong>: The origin of a <code>SpaceView</code>.\nPut children in separate tabs\n<strong>Component</strong>: Show a slider for the index of some dimension …\n<strong>Component</strong>: A timeline identified by its name.\nOrder the children top to bottom\n<strong>Component</strong>: Determines whether an image or texture should …\n<strong>Component</strong>: Hash of a viewer recommendation.\n<strong>Component</strong>: Whether the container, view, entity or instance …\n<strong>Component</strong>: The range of values on a given timeline that …\n<strong>Component</strong>: Visual bounds in 2D space used for <code>Spatial2DView</code>…\n<strong>Component</strong>: Override the visualizers for an entity.\n<strong>Component</strong>: A zoom level determines how much of the world …\nIs the filter active?\nComponent name of the filter column.\nEntity path of the filter column.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Self</code> from a <code>re_log_types::Timeline</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if self is <code>PanelState::Expanded</code>\nReturns <code>true</code> if self is <code>PanelState::Hidden</code>\nCreate a <code>Self</code> from an <code>EntityPath</code> and a …\nCreate a new range filter with the provided time …\nCreate a new <code>Self</code>.\nCreates a new <code>TensorDimensionIndexSlider</code> to determine the …\nSets the panel to <code>Self::Hidden</code> if it is collapsed or …\n<strong>Component</strong>: Whether the viewport layout is determined …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether or not space views should be created …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The kind of a blueprint container (tabs, grid, …\nOrganize children in a grid layout\nOrder the children left to right\nPut children in separate tabs\nOrder the children top to bottom\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: How many columns a grid container should have.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The unique id of a space view, used to refer to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The container that sits at the root of a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether a space view is maximized.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Override the visualizers for an entity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A list of strings of text, encoded as UTF-8.\n<strong>Datatype</strong>: A list of strings of text, encoded as UTF-8.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterates through the list of strings as Rust <code>str</code> …\n<strong>Component</strong>: A display name, typically for an entity or a …\nReturns the name as a string slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")
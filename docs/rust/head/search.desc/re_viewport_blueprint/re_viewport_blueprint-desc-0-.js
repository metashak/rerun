searchState.loadedDescShard("re_viewport_blueprint", 0, "Rerun Viewport Blueprint\nAdd a new container of the provided kind to the provided …\nAdd a new space view to the provided container (or the …\nThe native version of a …\nEnsure the tab for the provided space view is focused (see …\nMake all column and row shares the same for this container\nMove some contents to a different container\nMove one or more <code>Contents</code> to a newly created container\nRemove a container (recursively) or a space view\nChange the kind of a container.\nSimplify the container with the provided options\nA view of a space.\nData to be added to a space view, built from a …\nMutation actions to perform on the tree at the end of the …\nUtility for querying view properties.\nDescribes the layout and contents of the Viewport Panel.\nWhether the viewport layout is determined automatically.\nWhether space views should be created automatically.\nEntity path in the blueprint store where all components of …\nConverts a <code>egui_tiles::ContainerKind</code> into a …\nConverts a …\nAll the containers found in the viewport.\nThe content of this space view as defined by its queries.\nList out all space views we generate by default for the …\nPath where these space views defaults can be found.\nEntity path in the blueprint store where all components of …\nShow one tab as maximized?\nHashes of all recommended space views the viewer has …\nPending blueprint writes for nested components from …\nThe root container.\nThe “anchor point” of this space view. The transform …\nWhere the space views are stored.\nThe layouts of all the space views.\nChannel to pass Blueprint mutation messages back to the …\nUI utilities related to the viewport blueprint.\nTrue if this space view is visible in the UI.\nThe native version of a …\nClears the blueprint component for this container.\nReturns this container’s display name\nReturns the argument unchanged.\nCreates a new <code>ContainerBlueprint</code> from the given …\nCalls <code>U::from(self)</code>.\nPlaceholder name displayed in the UI if the user hasn’t …\nPersist the entire <code>ContainerBlueprint</code> to the blueprint …\nSets the display name for this container.\nAttempt to load a <code>ContainerBlueprint</code> from the blueprint …\nA view of a space.\nThe content of this space view as defined by its queries.\nPath at which a view writes defaults for components.\nPath where these space views defaults can be found.\nReturns this space view’s display name\nCreates a new <code>SpaceViewBlueprint</code> with the same contents, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPlaceholder name displayed in the UI if the user hasn’t …\nCreates a new <code>SpaceViewBlueprint</code> with a single …\nPending blueprint writes for nested components from …\nPersist the entire <code>SpaceViewBlueprint</code> to the blueprint …\nThe “anchor point” of this space view. The transform …\nAttempt to load a <code>SpaceViewBlueprint</code> from the blueprint …\nTrue if this space view is visible in the UI.\nHelper struct for executing the query from …\nData to be added to a space view, built from a …\nChecks whether the results of this query “fully contains…\nBuild up the initial <code>DataQueryResult</code> for this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to load a <code>SpaceViewContents</code> from the blueprint …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SpaceViewContents</code>.\nDirectly add an exclusion rule to the <code>EntityPathFilter</code>.\nDirectly add an inclusion rule to the <code>EntityPathFilter</code>.\nRemove a subtree and any existing rules that it would …\nPersist the entire <code>SpaceViewContents</code> to the blueprint …\nRecursively walk the <code>DataResultTree</code> and update the …\nRecursively walk the <code>DataResultTree</code> and update the …\nAdd a new container of the provided kind to the provided …\nAdd a new space view to the provided container (or the …\nEnsure the tab for the provided space view is focused (see …\nMake all column and row shares the same for this container\nMove some contents to a different container\nMove one or more <code>Contents</code> to a newly created container\nRemove a container (recursively) or a space view\nChange the kind of a container.\nSimplify the container with the provided options\nMutation actions to perform on the tree at the end of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nModal for adding a new space view of container to an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDraw a single row.\nUtility for querying view properties.\nReturns whether any property is non-empty.\nEntity path in the blueprint store where all components of …\nClears a blueprint component.\nGet the component array for a given type, not using any …\nGet the component array for a given type or an empty …\nGet the component array for a given type or its fallback …\nGet a single component or None, not using any fallbacks.\nGet the value of a specific component or its fallback if …\nEntity path in the blueprint store where all components of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nQuery a specific view property for a given view.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a query context for this view property.\nResets all components to the values they had in the …\nResets all components to empty values, i.e. the fallback.\nResets a blueprint component to the value it had in the …\nSave change to a blueprint component.\nDescribes the layout and contents of the Viewport Panel.\nAdd a container of the provided kind.\nAdd a set of space views to the viewport.\nWhether the viewport layout is determined automatically.\nWhether space views should be created automatically.\nAll the containers found in the viewport.\nReturns an iterator over all the contents (space views and …\nDuplicates a space view and its entity property overrides.\nGiven a predicate, finds the (first) matching contents by …\nGiven a predicate, finds the (first) matching contents by …\nGiven a container or a space view, find its enclosing …\nMake sure the tab corresponding to this space view is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if some content is (directly or indirectly) …\nCheck the visibility of the provided content.\nDetermine whether all views in a blueprint are invalid.\nIf <code>false</code>, the item is referring to data that is not …\nMake all children of the given container the same size.\nShow one tab as maximized?\nMove the <code>contents</code> container or space view to the specified …\nMove some <code>Contents</code> to a newly created container of the …\nHashes of all recommended space views the viewer has …\nRecursively remove a container or a space view.\nThe root container.\nSave the current state of the viewport to the blueprint …\nSet the kind of the provided container.\nSets the visibility for the provided content.\nSimplify the container tree with the provided options.\nWhere the space views are stored.\nSpawns new space views if enabled.\nThe layouts of all the space views.\nChannel to pass Blueprint mutation messages back to the …\nAttempt to load a <code>SpaceViewBlueprint</code> from the blueprint …\nWalk the entire <code>Contents</code> tree, starting from the root …\nWalk the subtree defined by the provided container id and …")